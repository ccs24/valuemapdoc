{"version":3,"file":"tabulatormap.min.js","sources":["../src/tabulatormap.js"],"sourcesContent":["/* eslint no-trailing-spaces: \"off\", no-unused-vars: \"off\" */\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable jsdoc/require-param */\ndefine('mod_valuemapdoc/tabulatormap', [\n    'mod_valuemapdoc/tabulatorlib', \n    'core/ajax', \n    'core_user/repository',\n    'core/notification',\n    'jquery'\n], function(\n    Tabulator, \n    Ajax, \n    UserRepository,\n    Notification,\n    $\n) {\n\n    return {\n        init: function() {\n            console.log('[tabulatormap] Module loaded');\n\n            const el = document.querySelector('#valuemap-table-js');\n            if (!el) {\n                console.warn('[tabulatormap] Table element not found');\n                return;\n            }\n\n            const columns = JSON.parse(el.dataset.columns);\n            const courseid = el.dataset.courseid;\n            const cmid = el.dataset.cmid;\n            const filtercmid = el.dataset.filtercmid || '';\n            const groupid = document.querySelector('#groupfilter')?.value || 0;\n\n            const fullscreenBtn = document.querySelector('#toggle-fullscreen');\n            if (fullscreenBtn) {\n                fullscreenBtn.addEventListener('click', () => {\n                    document.body.classList.toggle('valuemapdoc-fullscreen');\n                    if (document.body.classList.contains('valuemapdoc-fullscreen')) {\n                        fullscreenBtn.textContent = '❎ Zamknij pełny ekran';\n                    } else {\n                        fullscreenBtn.textContent = '🔳 Pełny ekran';\n                    }\n                });        \n            }\n\n            /**\n             * Generate Tabulator columns with editable fields and username column\n             * @param {Array} columns Array of column definitions received from dataset\n             * @returns {Array} Enhanced column definitions with selection and username\n             */\n            function prepareColumns(columns) {\n                const enhancedColumns = [\n                    {\n                        formatter: \"rowSelection\",\n                        titleFormatter: \"rowSelection\",\n                        hozAlign: \"center\",\n                        headerSort: false,\n                        width: 50\n                    },\n                    ...columns.map(col => ({\n                        ...col,\n                        headerFilter: \"input\",\n                        editable: (cell) => cell.getRow().getData().ismaster !== 1,\n                        editor: \"textarea\"\n                    })),\n                    // Dodaj kolumnę username na końcu\n                    {\n                        title: \"Autor\",\n                        field: \"username\", \n                        hozAlign: \"left\",\n                        headerSort: true,\n                        width: 120,\n                        headerFilter: \"input\",\n                        editable: false,\n                        formatter: function(cell, formatterParams) {\n                            const value = cell.getValue();\n                            const data = cell.getRow().getData();\n                            \n                            if (data.ismaster === 1) {\n                                return '<i class=\"fa fa-star text-warning\" title=\"Master entry\"></i> ' + value;\n                            }\n                            \n                            return value;\n                        }\n                    }\n                ];\n                \n                return enhancedColumns;\n            }\n\n            /**\n             * Pobiera username aktualnego użytkownika z odpowiedzi AJAX\n             * @param {Array} response - Dane z serwera\n             * @returns {string} Username aktualnego użytkownika\n             */\n            function getUsernameFromResponse(response) {\n                const currentUserId = M.cfg.userid;\n                \n                const userEntry = response.find(entry => entry.userid == currentUserId);\n                \n                if (userEntry && userEntry.username) {\n                    return userEntry.username;\n                }\n                \n                return M.cfg.fullname || M.cfg.username || 'Ja';\n            }\n\n            /**\n             * Dodaje przycisk przełączania filtra użytkownika\n             * @param {Object} table - Instancja Tabulatora\n             * @param {string} currentUsername - Username aktualnego użytkownika\n             */\n            function addUserFilterToggle(table, currentUsername) {\n                const toolbar = document.querySelector('.btn-toolbar');\n                if (!toolbar) return;\n                \n                const filterContainer = document.createElement('div');\n                filterContainer.className = 'btn-group ms-auto';\n                filterContainer.setAttribute('role', 'group');\n                \n                const toggleButton = document.createElement('button');\n                toggleButton.className = 'btn btn-outline-info btn-sm';\n                toggleButton.setAttribute('type', 'button');\n                toggleButton.innerHTML = '<i class=\"fa fa-user\"></i> Tylko moje';\n                toggleButton.title = 'Przełącz między moimi wpisami a wszystkimi';\n                \n                let showingOnlyMine = true;\n                \n                toggleButton.addEventListener('click', function() {\n                    if (showingOnlyMine) {\n                        table.clearHeaderFilter(\"username\");\n                        toggleButton.innerHTML = '<i class=\"fa fa-users\"></i> Wszystkie';\n                        toggleButton.className = 'btn btn-outline-secondary btn-sm';\n                        showingOnlyMine = false;\n                    } else {\n                        table.setHeaderFilterValue(\"username\", currentUsername);\n                        toggleButton.innerHTML = '<i class=\"fa fa-user\"></i> Tylko moje';\n                        toggleButton.className = 'btn btn-outline-info btn-sm';\n                        showingOnlyMine = true;\n                    }\n                });\n                \n                filterContainer.appendChild(toggleButton);\n                toolbar.appendChild(filterContainer);\n            }\n\n            const enhancedColumns = prepareColumns(columns);\n\n            Ajax.call([{\n                methodname: 'mod_valuemapdoc_get_entries',\n                args: {\n                    courseid: courseid,\n                    cmid: cmid,\n                    include_master: filtercmid,\n                    groupid: groupid\n                },\n            }])[0].done(function(response) {\n                console.log('[tabulatormap] Entries loaded:', response.length, 'records');\n\n                // Pobierz username aktualnego użytkownika\n                const currentUsername = getUsernameFromResponse(response);\n\n                const table = new Tabulator(el, {\n                    data: response,\n                    columns: enhancedColumns,\n                    layout:\"fitDataTable\",\n                    height: \"100%\",\n                    width: \"100%\",\n                    pagination: true,\n                    paginationSize: 20,\n                    placeholder: \"Brak danych do wyświetlenia\",\n                    rowFormatter: function(row) {\n                        const data = row.getData();\n                        if (data.ismaster === 1) {\n                            row.getElement().style.backgroundColor = '#eaffea';\n                            row.getElement().classList.add('ismaster');\n                        }\n                    },\n                    selectable: true,\n                });\n\n                // Ustaw domyślny filtr na kolumnie username (tylko wpisy użytkownika)\n                table.setHeaderFilterValue(\"username\", currentUsername);\n                \n                // Dodaj przycisk przełączania filtra użytkownika\n                addUserFilterToggle(table, currentUsername);\n\n                // Obsługa edycji komórek\n                table.on(\"cellEdited\", function(cell){\n                    const updatedData = cell.getRow().getData();\n\n                    Ajax.call([{\n                        methodname: 'mod_valuemapdoc_update_cell',\n                        args: {\n                            id: updatedData.id,\n                            field: cell.getField(),\n                            value: cell.getValue()\n                        }\n                    }])[0].done(function(response) {\n                        console.log('[tabulatormap] Cell updated successfully');\n                    }).fail(function(error) {\n                        console.error('[tabulatormap] Error updating cell:', error);\n                        alert(\"Nie udało się zapisać zmian.\");\n                    });\n                });\n\n                // Obsługa podwójnego kliknięcia tylko dla rekordów master\n                table.on(\"rowDblClick\", function(e, row) {\n                    const data = row.getData();\n                    if (data.ismaster === 1) {\n                        const rateUrl = `${M.cfg.wwwroot}/mod/valuemapdoc/edit.php?id=${cmid}&entryid=${data.id}`;\n                        window.open(rateUrl);\n                    }\n                });\n\n                // Search functionality\n                const searchInput = document.querySelector('#valuemap-search');\n                if (searchInput) {\n                    searchInput.addEventListener('input', function () {\n                        const filterValue = this.value.toLowerCase();\n                        table.setFilter((data) => {\n                            return columns.some(col => {\n                                const field = col.field;\n                                return data[field]?.toString().toLowerCase().includes(filterValue);\n                            });\n                        });\n                    });\n                }\n\n                // UPROSZCZONE GENERATE BUTTON - bez hierarchy\n                const generateButton = document.querySelector('#generate-button');\n                if (generateButton) {\n                    generateButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Proszę zaznaczyć co najmniej jeden rekord.\");\n                            return;\n                        }\n\n                        const templateSelect = document.querySelector('#templateid');\n                        if (!templateSelect || !templateSelect.value) {\n                            alert(\"Wybierz szablon przed generowaniem dokumentu.\");\n                            return;\n                        }\n\n                        const form = document.createElement('form');\n                        form.method = 'POST';\n                        form.action = generateButton.dataset.action || 'generate.php';\n\n                        const idInput = document.createElement('input');\n                        idInput.type = 'hidden';\n                        idInput.name = 'id';\n                        idInput.value = cmid;\n                        form.appendChild(idInput);\n\n                        const templateInput = document.createElement('input');\n                        templateInput.type = 'hidden';\n                        templateInput.name = 'templateid';\n                        templateInput.value = templateSelect.value;\n                        form.appendChild(templateInput);\n\n                        selectedData.forEach(entry => {\n                            const input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = 'entryids[]';\n                            input.value = entry.id;\n                            form.appendChild(input);\n                        });\n\n                        // Add filenameprefix if present\n                        const filenameprefix = document.getElementById('filenameprefix');\n                        if (filenameprefix && filenameprefix.value) {\n                            const input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = 'filenameprefix';\n                            input.value = filenameprefix.value;\n                            form.appendChild(input);\n                        }\n\n                        document.body.appendChild(form);\n                        form.submit();\n                    });\n                }\n\n                // Bulk operations handlers\n                const editBulkButton = document.querySelector('#edit-bulk-button');\n                if (editBulkButton) {\n                    editBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do edycji.\");\n                            return;\n                        }\n\n                        if (selectedData.length === 1) {\n                            const id = selectedData[0].id;\n                            const url = `${M.cfg.wwwroot}/mod/valuemapdoc/edit.php?id=${cmid}&entryid=${id}`;\n                            window.location.href = url;\n                        } else {\n                            const ids = selectedData.map(r => r.id);\n                            const url = new URL(`${M.cfg.wwwroot}/mod/valuemapdoc/edit_bulk.php`);\n                            url.searchParams.append('id', cmid);\n                            url.searchParams.append('entryids', ids.join(','));\n                            window.open(url.toString());\n                        }\n                    });\n                }\n\n                // Duplicate functionality\n                const duplicateBulkButton = document.querySelector('#duplicate-bulk-button');\n                if (duplicateBulkButton) {\n                    duplicateBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do powielenia.\");\n                            return;\n                        }\n                        const ids = selectedData.map(r => r.id);\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_create_entries_bulk',\n                            args: {\n                                entryids: ids,\n                                cmid: cmid\n                            }\n                        }])[0].done((response) => {\n                            table.updateOrAddData(response);\n                            table.deselectRow();\n                        }).fail((error) => {\n                            console.error(\"[tabulatormap] Error duplicating records:\", error);\n                            alert(\"Nie udało się powielić rekordy.\");\n                        });\n                    });\n                }\n\n                // Add empty line\n                const emptyBulkButton = document.querySelector('#empty-bulk-button');\n                if (emptyBulkButton) {\n                    emptyBulkButton.addEventListener('click', function () {\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_create_entries_bulk',\n                            args: {\n                                entryids: {},\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            table.updateOrAddData(response);\n                            table.deselectRow();\n                        }).fail((error) => {\n                            console.error(\"[tabulatormap] Error creating empty records:\", error);\n                        });\n                    });\n                }\n\n                // Row selection handler for enabling/disabling buttons\n                table.on('rowSelectionChanged', function(data) {\n                    const buttons = [\n                        '#delete-bulk-button', \n                        '#generate-button', \n                        '#move-bulk-button', \n                        '#edit-bulk-button', \n                        '#duplicate-bulk-button'\n                    ];\n\n                    buttons.forEach(selector => {\n                        const button = document.querySelector(selector);\n                        if (button) {\n                            if (data.length > 0) {\n                                button.disabled = false;\n                                button.removeAttribute('disabled');\n                                button.classList.remove('disabled');\n                            } else {\n                                button.setAttribute('disabled', true);\n                                button.classList.add('disabled');\n                                button.disabled = true;\n                            }\n                        }\n                    });\n                });\n\n                // Delete bulk handler\n                const deleteBulkButton = document.querySelector('#delete-bulk-button');\n                if (deleteBulkButton) {\n                    deleteBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do usunięcia.\");\n                            return;\n                        }\n                        const filteredData = selectedData.filter(r => r.ismaster !== 1);\n                        const ids = filteredData.map(r => r.id);\n                        const blocked = selectedData.length - filteredData.length;\n                        if (blocked > 0) {\n                            alert(`${blocked} rekord(ów) typu Master nie mogą zostać usunięte i zostały pominięte.`);\n                        }\n                        if (!ids.length) {\n                            alert(\"Nie zaznaczono żadnych rekordów możliwych do usunięcia.\");\n                            return;\n                        }\n                        if (confirm(`Czy na pewno chcesz usunąć ${ids.length} rekordów?`)) {\n                            Ajax.call([{\n                                methodname: 'mod_valuemapdoc_delete_bulk',\n                                args: {\n                                    entryids: ids,\n                                    cmid: cmid\n                                }\n                            }])[0].done(() => {\n                                ids.forEach(id => table.deleteRow(id));\n                                table.deselectRow();\n                            }).fail((error) => {\n                                console.error(\"[tabulatormap] Error deleting records:\", error);\n                                alert(\"Nie udało się usunąć rekordów.\");\n                            });\n                        }\n                    });\n                }\n\n                // Move bulk handler\n                const moveBulkButton = document.querySelector('#move-bulk-button');\n                if (moveBulkButton) {\n                    moveBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do przeniesienia.\");\n                            return;\n                        }\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_master_instances',\n                            args: { courseid: courseid }\n                        }])[0].done(function(instances) {\n                            if (instances.length === 0) {\n                                alert(\"Brak dostępnych aktywności typu Master.\");\n                                return;\n                            }\n\n                            // Prosta implementacja - wybierz pierwszą dostępną instancję\n                            if (instances.length === 1) {\n                                const targetcmid = instances[0].cmid;\n                                const ids = selectedData.map(r => r.id);\n                                Ajax.call([{\n                                    methodname: 'mod_valuemapdoc_move_bulk',\n                                    args: {\n                                        entryids: ids,\n                                        targetcmid: targetcmid\n                                    }\n                                }])[0].done(() => {\n                                    ids.forEach(id => table.deleteRow(id));\n                                }).fail((error) => {\n                                    console.error(\"[tabulatormap] Error moving records:\", error);\n                                    alert(\"Nie udało się przenieść rekordów.\");\n                                });\n                            } else {\n                                alert(\"Znaleziono wiele instancji Master. Wybierz konkretną instancję z listy.\");\n                            }\n                        }).fail((error) => {\n                            console.error(\"[tabulatormap] Error getting master instances:\", error);   \n                            alert(\"Nie udało się pobrać listy Master Map.\");\n                        });\n                    });\n                }\n\n                // Group filter handler z zachowaniem filtra użytkownika\n                const groupFilter = document.querySelector('#groupfilter');\n                if (groupFilter) {\n                    groupFilter.addEventListener('change', () => {\n                        const selectedGroupId = groupFilter.value;\n                        const currentFilterCmid = masterFilter?.value || filtercmid;\n                        const currentUsernameFilter = table.getHeaderFilterValue(\"username\");\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_entries',\n                            args: {\n                                courseid: courseid,\n                                cmid: cmid,\n                                include_master: currentFilterCmid,\n                                groupid: parseInt(selectedGroupId)\n                            },\n                        }])[0].done(function(newResponse) {\n                            table.setData(newResponse);\n                            \n                            // Przywróć filtr użytkownika po zmianie danych\n                            if (currentUsernameFilter) {\n                                table.setHeaderFilterValue(\"username\", currentUsernameFilter);\n                            }\n                            \n                        }).fail(function(error) {\n                            console.error(\"[tabulatormap] Error loading data after group change:\", error);\n                        });\n                    });\n                }\n\n                // Master filter handler z zachowaniem filtra użytkownika\n                const masterFilter = document.querySelector('#masterfilter');\n                if (masterFilter) {\n                    masterFilter.addEventListener('change', () => {\n                        const newFilterCmid = masterFilter.value;\n                        const currentUsernameFilter = table.getHeaderFilterValue(\"username\");\n\n                        // Save user preference\n                        UserRepository.setUserPreference('mod_valuemapdoc_masterfilters', cmid + ':' + newFilterCmid)\n                            .then(() => {\n                                console.log(\"[tabulatormap] Preference saved:\", newFilterCmid);\n                            })\n                            .catch(error => {\n                                console.error(\"[tabulatormap] Error saving preference:\", error);\n                            });\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_entries',\n                            args: {\n                                courseid: courseid,\n                                cmid: cmid,\n                                include_master: newFilterCmid,\n                                groupid: document.querySelector('#groupfilter')?.value || 0\n                            },\n                        }])[0].done(function(newResponse) {\n                            table.setData(newResponse);\n                            \n                            // Przywróć filtr użytkownika po zmianie danych\n                            if (currentUsernameFilter) {\n                                table.setHeaderFilterValue(\"username\", currentUsernameFilter);\n                            }\n                            \n                        }).fail(function(error) {\n                            console.error(\"[tabulatormap] Error loading data after master change:\", error);\n                        });\n                    });\n                }\n\n                // Window resize handler\n                window.addEventListener('resize', () => {\n                    table.redraw(true);\n                });\n\n            }).fail(function(error) {\n                console.error(\"[tabulatormap] Error loading entries:\", error);\n                alert(\"Nie udało się załadować danych tabeli.\");\n            });\n        }\n    };\n});"],"names":["define","Tabulator","Ajax","UserRepository","Notification","$","init","console","log","el","document","querySelector","warn","columns","JSON","parse","dataset","courseid","cmid","filtercmid","groupid","value","fullscreenBtn","addEventListener","body","classList","toggle","contains","textContent","enhancedColumns","formatter","titleFormatter","hozAlign","headerSort","width","map","col","headerFilter","editable","cell","getRow","getData","ismaster","editor","title","field","formatterParams","getValue","prepareColumns","call","methodname","args","include_master","done","response","length","currentUsername","currentUserId","M","cfg","userid","userEntry","find","entry","username","fullname","getUsernameFromResponse","table","data","layout","height","pagination","paginationSize","placeholder","rowFormatter","row","getElement","style","backgroundColor","add","selectable","setHeaderFilterValue","toolbar","filterContainer","createElement","className","setAttribute","toggleButton","innerHTML","showingOnlyMine","clearHeaderFilter","appendChild","addUserFilterToggle","on","updatedData","id","getField","fail","error","alert","e","rateUrl","wwwroot","window","open","searchInput","filterValue","this","toLowerCase","setFilter","some","_data$field","toString","includes","generateButton","selectedData","getSelectedData","templateSelect","form","method","action","idInput","type","name","templateInput","forEach","input","filenameprefix","getElementById","submit","editBulkButton","url","location","href","ids","r","URL","searchParams","append","join","duplicateBulkButton","entryids","updateOrAddData","deselectRow","emptyBulkButton","selector","button","disabled","removeAttribute","remove","deleteBulkButton","filteredData","filter","blocked","confirm","deleteRow","moveBulkButton","instances","targetcmid","groupFilter","selectedGroupId","currentFilterCmid","masterFilter","currentUsernameFilter","getHeaderFilterValue","parseInt","newResponse","setData","newFilterCmid","setUserPreference","then","catch","redraw"],"mappings":"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"}