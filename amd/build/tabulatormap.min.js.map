{"version":3,"file":"tabulatormap.min.js","sources":["../src/tabulatormap.js"],"sourcesContent":["/* eslint-env es6 */\n/* eslint no-trailing-spaces: \"off\", \n          no-unused-vars: \"off\" */\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\ndefine('mod_valuemapdoc/tabulatormap', [\n    'mod_valuemapdoc/tabulatorlib', \n    'core/ajax', \n    'core_user/repository',\n    'core/notification',\n    'jquery'\n], function(\n    Tabulator, \n    Ajax, \n    UserRepository,\n    Notification,\n    $\n) {\n\n    return {\n        init: function(courseid, cmid, filtercmid, columns) {\n\n            console.log('[tabulatormap] Module loaded');\n            console.log('[tabulatormap] Course ID:', courseid, 'CM ID:', cmid, 'Filter CM ID:', filtercmid);\n            console.log('[tabulatormap] Columns:', columns);\n\n            var el = document.querySelector('#valuemap-table-js');\n            if (!el) {\n                console.warn('[tabulatormap] Table element not found');\n                return;\n            }\n\n            var jsonText = document.getElementById('valuemap-columns').textContent;\n            //var columns = JSON.parse(jsonText);\n\n\n           // var columns = JSON.parse(el.dataset.columns);\n\n\n          //  var courseid = el.dataset.courseid;\n          //  var cmid = el.dataset.cmid;\n          //  var filtercmid = el.dataset.filtercmid || '';\n            var groupfilterEl = document.querySelector('#groupfilter');\n            var groupid = groupfilterEl ? groupfilterEl.value : 0;\n\n            var fullscreenBtn = document.querySelector('#toggle-fullscreen');\n            if (fullscreenBtn) {\n                fullscreenBtn.addEventListener('click', function() {\n                    document.body.classList.toggle('valuemapdoc-fullscreen');\n                    if (document.body.classList.contains('valuemapdoc-fullscreen')) {\n                        fullscreenBtn.textContent = '‚ùé Zamknij pe≈Çny ekran';\n                    } else {\n                        fullscreenBtn.textContent = 'üî≥ Pe≈Çny ekran';\n                    }\n                });        \n            }\n\n            /**\n             * Get username from response data for current user\n             * @param {Array} response Response data from server\n             * @returns {string} Current user's username\n             */\n            function getUsernameFromResponse(response) {\n                var currentUserId = M.cfg.userid;\n                var userEntry = response.find(function(entry) {\n                    return entry.userid == currentUserId;\n                });\n                \n                if (userEntry && userEntry.username) {\n                    return userEntry.username;\n                }\n                \n                // Fallback to global user info\n                return M.cfg.fullname || M.cfg.username || 'Ja';\n            }\n\n            /**\n             * Generate Tabulator columns with editable fields and username column\n             * @param {Array} columns Array of column definitions received from dataset\n             * @returns {Array} Enhanced column definitions with selection and username\n             */\n            function prepareColumns(columns) {\n                var enhancedColumns = [\n                    {\n                        formatter: \"rowSelection\",\n                        titleFormatter: \"rowSelection\",\n                        hozAlign: \"center\",\n                        headerSort: false,\n                        width: 50\n                    }\n                ];\n                \n                // Add mapped columns\n                columns.forEach(function(col) {\n                    enhancedColumns.push({\n                        title: col.title,\n                        field: col.field,\n                        hozAlign: col.hozAlign,\n                        headerSort: col.headerSort,\n                        width: col.width,\n                        headerFilter: \"input\",\n                        editable: function(cell) {\n                            return cell.getRow().getData().ismaster !== 1;\n                        },\n                        editor: \"textarea\"\n                    });\n                });\n                \n                // Add username column\n                enhancedColumns.push({\n                    title: \"Autor\",\n                    field: \"username\", \n                    hozAlign: \"left\",\n                    headerSort: true,\n                    width: 120,\n                    headerFilter: \"input\",\n                    editable: false,\n                    formatter: function(cell, formatterParams) {\n                        var value = cell.getValue();\n                        if (cell.getRow().getData().ismaster === 1) {\n                            return '<i class=\"fa fa-star text-warning\" title=\"Master entry\"></i> ' + value;\n                        }\n                        return value;\n                    }\n                });\n\n                return enhancedColumns;\n            }\n\n            var enhancedColumns = prepareColumns(columns);\n\n            Ajax.call([{\n                methodname: 'mod_valuemapdoc_get_entries',\n                args: {\n                    courseid: courseid,\n                    cmid: cmid,\n                    include_master: filtercmid,\n                    groupid: groupid\n                },\n            }])[0].done(function(response) {\n                console.log('[tabulatormap] Entries loaded:', response.length, 'records');\n\n                var currentUsername = getUsernameFromResponse(response);\n\n                var table = new Tabulator(el, {\n                    data: response,\n                    columns: enhancedColumns,\n                    layout: \"fitDataTable\",\n                    height: \"100%\",\n                    width: \"100%\",\n                    pagination: true,\n                    paginationSize: 20,\n                    placeholder: \"Brak danych do wy≈õwietlenia\",\n                    rowFormatter: function(row) {\n                        var data = row.getData();\n                        if (data.ismaster === 1) {\n                            row.getElement().style.backgroundColor = '#eaffea';\n                            row.getElement().classList.add('ismaster');\n                        }\n                    },\n                    selectable: true,\n                });\n\n                // Set default filter to show only current user's entries\n                table.setHeaderFilterValue(\"username\", currentUsername);\n\n                /**\n                 * Add user filter toggle button\n                 * @param {Object} table Tabulator instance\n                 * @param {string} currentUsername Current user's username\n                 */\n                function addUserFilterToggle(table, currentUsername) {\n                    var toolbar = document.querySelector('.btn-toolbar');\n                    if (!toolbar) { \n                        return;\n                    }\n\n                    var filterContainer = document.createElement('div');\n                    filterContainer.className = 'btn-group ms-auto';\n                    filterContainer.setAttribute('role', 'group');\n\n                    var toggleButton = document.createElement('button');\n                    toggleButton.className = 'btn btn-outline-info btn-sm';\n                    toggleButton.setAttribute('type', 'button');\n                    toggleButton.innerHTML = '<i class=\"fa fa-user\"></i> Tylko moje';\n                    toggleButton.title = 'Prze≈ÇƒÖcz miƒôdzy moimi wpisami a wszystkimi';\n\n                    var showingOnlyMine = true;\n\n                    toggleButton.addEventListener('click', function() {\n                        if (showingOnlyMine) {\n                            table.clearHeaderFilter(\"username\");\n                            toggleButton.innerHTML = '<i class=\"fa fa-users\"></i> Wszystkie';\n                            toggleButton.className = 'btn btn-outline-secondary btn-sm';\n                            showingOnlyMine = false;\n                        } else {\n                            table.setHeaderFilterValue(\"username\", currentUsername);\n                            toggleButton.innerHTML = '<i class=\"fa fa-user\"></i> Tylko moje';\n                            toggleButton.className = 'btn btn-outline-info btn-sm';\n                            showingOnlyMine = true;\n                        }\n                    });\n\n                    filterContainer.appendChild(toggleButton);\n                    toolbar.appendChild(filterContainer);\n                }\n\n                addUserFilterToggle(table, currentUsername);\n\n                // Handle cell editing\n                table.on(\"cellEdited\", function(cell){\n                    var updatedData = cell.getRow().getData();\n\n                    Ajax.call([{\n                        methodname: 'mod_valuemapdoc_update_cell',\n                        args: {\n                            id: updatedData.id,\n                            field: cell.getField(),\n                            value: cell.getValue()\n                        }\n                    }])[0].done(function(response) {\n                        console.log('[tabulatormap] Cell updated successfully');\n                    }).fail(function(error) {\n                        console.error('[tabulatormap] Error updating cell:', error);\n                        alert('Nie uda≈Ço siƒô zapisaƒá zmian.');\n                    });\n                });\n\n                // Handle double-click to open edit form\n                table.on(\"rowDblClick\", function(e, row){\n                    var data = row.getData();\n                    if (data.ismaster === 1) {\n                        var rateUrl = M.cfg.wwwroot + '/mod/valuemapdoc/edit.php?id=' + cmid + '&entryid=' + data.id;\n                        window.open(rateUrl);\n                    }\n                });\n\n                // Global search functionality\n                var searchInput = document.querySelector('#valuemap-search');\n                if (searchInput) {\n                    searchInput.addEventListener('input', function() {\n                        var filterValue = this.value.toLowerCase();\n                        table.setFilter(function(data) {\n                            return columns.some(function(col) {\n                                var field = col.field;\n                                var fieldValue = data[field];\n                                return fieldValue && fieldValue.toString().toLowerCase().includes(filterValue);\n                            });\n                        });\n                    });\n                }\n\n                // Generate button functionality\n                var generateButton = document.querySelector('#generate-button');\n                if (generateButton) {\n                    generateButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Proszƒô zaznaczyƒá co najmniej jeden rekord.');\n                            return;\n                        }\n\n                        var templateSelect = document.querySelector('#templateid');\n                        if (!templateSelect || !templateSelect.value) {\n                            alert('Wybierz szablon przed generowaniem dokumentu.');\n                            return;\n                        }\n\n                        var form = document.createElement('form');\n                        form.method = 'POST';\n                        form.action = generateButton.dataset.action || 'generate.php';\n\n                        var idInput = document.createElement('input');\n                        idInput.type = 'hidden';\n                        idInput.name = 'id';\n                        idInput.value = cmid;\n                        form.appendChild(idInput);\n\n                        var templateInput = document.createElement('input');\n                        templateInput.type = 'hidden';\n                        templateInput.name = 'templateid';\n                        templateInput.value = templateSelect.value;\n                        form.appendChild(templateInput);\n\n                        selectedData.forEach(function(entry) {\n                            var input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = 'entryids[]';\n                            input.value = entry.id;\n                            form.appendChild(input);\n                        });\n\n                        var filenameprefix = document.getElementById('filenameprefix');\n                        if (filenameprefix && filenameprefix.value) {\n                            var input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = 'filenameprefix';\n                            input.value = filenameprefix.value;\n                            form.appendChild(input);\n                        }\n\n                        document.body.appendChild(form);\n                        form.submit();\n                    });\n                }\n\n                // Bulk edit button functionality\n                var editBulkButton = document.querySelector('#edit-bulk-button');\n                if (editBulkButton) {\n                    editBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Zaznacz rekordy do edycji.');\n                            return;\n                        }\n\n                        if (selectedData.length === 1) {\n                            // Single entry - open regular edit form\n                            var id = selectedData[0].id;\n                            var url = M.cfg.wwwroot + '/mod/valuemapdoc/edit.php?id=' + cmid + '&entryid=' + id;\n                            window.location.href = url;\n                        } else {\n                            // Multiple entries - open bulk edit form\n                            var ids = selectedData.map(function(r) {\n                                return r.id;\n                            });\n                            var bulkUrl = new URL(M.cfg.wwwroot + '/mod/valuemapdoc/edit_bulk.php');\n                            bulkUrl.searchParams.append('id', cmid);\n                            bulkUrl.searchParams.append('entryids', ids.join(','));\n                            window.open(bulkUrl.toString());\n                        }\n                    });\n                }\n\n                // Duplicate button functionality\n                var duplicateBulkButton = document.querySelector('#duplicate-bulk-button');\n                if (duplicateBulkButton) {\n                    duplicateBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Zaznacz rekordy do powielenia.');\n                            return;\n                        }\n\n                        var entryids = selectedData.map(function(entry) {\n                            return entry.id;\n                        });\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_duplicate_entries',\n                            args: {\n                                entryids: entryids,\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            response.forEach(function(newEntry) {\n                                table.updateOrAddData([newEntry]);\n                            });\n                            table.deselectRow();\n                        }).fail(function(error) {\n                            console.error('[tabulatormap] Error duplicating entries:', error);\n                            alert('Nie uda≈Ço siƒô powieliƒá wpis√≥w.');\n                        });\n                    });\n                }\n\n                // Empty button functionality  \n                var emptyBulkButton = document.querySelector('#empty-bulk-button');\n                if (emptyBulkButton) {\n                    emptyBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            var selector = document.querySelector('#bulk-actions');\n                            var button = selector ? selector.querySelector('button') : null;\n                            if (button) {\n                                button.disabled = true;\n                                setTimeout(function() {\n                                    button.removeAttribute('disabled');\n                                }, 3000);\n                            }\n                            if (selector) {\n                                selector.classList.add('animate');\n                                setTimeout(function() {\n                                    selector.classList.remove('animate');\n                                }, 1000);\n                            }\n                            return;\n                        }\n\n                        var entryids = selectedData.map(function(entry) {\n                            return entry.id;\n                        });\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_empty_entries',  \n                            args: {\n                                entryids: entryids,\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            response.forEach(function(updatedEntry) {\n                                table.updateOrAddData([updatedEntry]);\n                            });\n                            table.deselectRow();\n                        }).fail(function(error) {\n                            console.error('[tabulatormap] Error emptying entries:', error);\n                            alert('Nie uda≈Ço siƒô wyczy≈õciƒá wpis√≥w.');\n                        });\n                    });\n                }\n\n                // Delete button functionality\n                var deleteBulkButton = document.querySelector('#delete-bulk-button');\n                if (deleteBulkButton) {\n                    deleteBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Zaznacz rekordy do usuniƒôcia.');\n                            return;\n                        }\n\n                        var filteredData = selectedData.filter(function(entry) {\n                            return !entry.blocked;\n                        });\n                        if (filteredData.length !== selectedData.length) {\n                            alert('Niekt√≥re wpisy nie mogƒÖ byƒá usuniƒôte.');\n                            return;\n                        }\n\n                        if (!confirm('Czy na pewno chcesz usunƒÖƒá zaznaczone wpisy?')) {\n                            return;\n                        }\n\n                        var entryids = selectedData.map(function(entry) {\n                            return entry.id;\n                        });\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_delete_entries',\n                            args: {\n                                entryids: entryids,\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            entryids.forEach(function(id) {\n                                table.deleteRow(id);\n                            });\n                        }).fail(function(error) {\n                            console.error('[tabulatormap] Error deleting entries:', error);\n                            alert('Nie uda≈Ço siƒô usunƒÖƒá wpis√≥w.');\n                        });\n                    });\n                }\n\n                // Move to master button functionality\n                var moveBulkButton = document.querySelector('#move-bulk-button');\n                if (moveBulkButton) {\n                    moveBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Zaznacz rekordy do przeniesienia.');\n                            return;\n                        }\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_master_instances',\n                            args: {\n                                courseid: courseid\n                            }\n                        }])[0].done(function(instances) {\n                            if (!instances.length) {\n                                alert('Brak dostƒôpnych instancji master.');\n                                return;\n                            }\n\n                            var targetcmid;\n                            if (instances.length === 1) {\n                                targetcmid = instances[0].cmid;\n                            } else {\n                                // Show selection dialog for multiple instances\n                                // Implementation would go here\n                                return;\n                            }\n\n                            var entryids = selectedData.map(function(entry) {\n                                return entry.id;\n                            });\n                            Ajax.call([{\n                                methodname: 'mod_valuemapdoc_move_entries_to_master',\n                                args: {\n                                    entryids: entryids,\n                                    targetcmid: targetcmid\n                                }\n                            }])[0].done(function(response) {\n                                entryids.forEach(function(id) {\n                                    table.deleteRow(id);\n                                });\n                            }).fail(function(error) {\n                                console.error('[tabulatormap] Error moving entries:', error);\n                                alert('Nie uda≈Ço siƒô przenie≈õƒá wpis√≥w.');\n                            });\n                        });\n                    });\n                }\n\n                // Group filter functionality\n                var groupFilter = document.querySelector('#groupfilter');\n                if (groupFilter) {\n                    groupFilter.addEventListener('change', function() {\n                        var selectedGroupId = this.value;\n                        var masterFilterEl = document.querySelector('#masterfilter');\n                        var currentFilterCmid = masterFilterEl ? masterFilterEl.value : '';\n                        var currentUsernameFilter = table.getHeaderFilterValue('username') || '';\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_entries',\n                            args: {\n                                courseid: parseInt(courseid),\n                                cmid: parseInt(cmid),\n                                include_master: currentFilterCmid,\n                                groupid: parseInt(selectedGroupId)\n                            }\n                        }])[0].done(function(newResponse) {\n                            table.setData(newResponse);\n                            if (currentUsernameFilter) {\n                                table.setHeaderFilterValue('username', currentUsernameFilter);\n                            }\n                        }).catch(function(error) {\n                            console.error('[tabulatormap] Error loading group data:', error);\n                        });\n                    });\n                }\n\n                // Master filter functionality\n                var masterFilter = document.querySelector('#masterfilter');\n                if (masterFilter) {\n                    masterFilter.addEventListener('change', function() {\n                        var newFilterCmid = this.value;\n                        \n                        // Save user preference for master filter\n                        Ajax.call([{\n                            methodname: 'core_user_set_user_preferences',\n                            args: {\n                                preferences: [{\n                                    name: 'mod_valuemapdoc_master_filter',\n                                    value: newFilterCmid\n                                }]\n                            }\n                        }]).then(function() {\n                            // Reload page with new filter\n                            var url = new URL(window.location);\n                            if (newFilterCmid) {\n                                url.searchParams.set('filtercmid', newFilterCmid);\n                            } else {\n                                url.searchParams.delete('filtercmid');\n                            }\n                            window.location.href = url.toString();\n                        }).catch(function(error) {\n                            console.error('[tabulatormap] Error saving filter preference:', error);\n                            // Still reload even if preference saving failed\n                            var url = new URL(window.location);\n                            if (newFilterCmid) {\n                                url.searchParams.set('filtercmid', newFilterCmid);\n                            } else {\n                                url.searchParams.delete('filtercmid');\n                            }\n                            window.location.href = url.toString();\n                        });\n                    });\n                }\n\n                // Redraw table after initialization\n                table.redraw();\n\n            }).fail(function(error) {\n                console.error('[tabulatormap] Error loading entries:', error);\n                alert('Nie uda≈Ço siƒô za≈Çadowaƒá danych.');\n            });\n        }\n    };\n});"],"names":["define","Tabulator","Ajax","UserRepository","Notification","$","init","courseid","cmid","filtercmid","columns","console","log","el","document","querySelector","getElementById","textContent","groupfilterEl","groupid","value","fullscreenBtn","addEventListener","body","classList","toggle","contains","enhancedColumns","formatter","titleFormatter","hozAlign","headerSort","width","forEach","col","push","title","field","headerFilter","editable","cell","getRow","getData","ismaster","editor","formatterParams","getValue","prepareColumns","call","methodname","args","include_master","done","response","length","currentUsername","currentUserId","M","cfg","userid","userEntry","find","entry","username","fullname","getUsernameFromResponse","table","data","layout","height","pagination","paginationSize","placeholder","rowFormatter","row","getElement","style","backgroundColor","add","selectable","setHeaderFilterValue","toolbar","filterContainer","createElement","className","setAttribute","toggleButton","innerHTML","showingOnlyMine","clearHeaderFilter","appendChild","addUserFilterToggle","on","updatedData","id","getField","fail","error","alert","e","rateUrl","wwwroot","window","open","searchInput","filterValue","this","toLowerCase","setFilter","some","fieldValue","toString","includes","generateButton","selectedData","getSelectedData","templateSelect","form","method","action","dataset","idInput","type","name","templateInput","input","filenameprefix","submit","editBulkButton","url","location","href","ids","map","r","bulkUrl","URL","searchParams","append","join","duplicateBulkButton","entryids","newEntry","updateOrAddData","deselectRow","emptyBulkButton","selector","button","disabled","setTimeout","removeAttribute","remove","updatedEntry","deleteBulkButton","filter","blocked","confirm","deleteRow","moveBulkButton","instances","targetcmid","groupFilter","selectedGroupId","masterFilterEl","currentFilterCmid","currentUsernameFilter","getHeaderFilterValue","parseInt","newResponse","setData","catch","masterFilter","newFilterCmid","preferences","then","set","delete","redraw","warn"],"mappings":"AAMAA,sCAAuC,CACnC,+BACA,YACA,uBACA,oBACA,WACD,SACCC,UACAC,KACAC,eACAC,aACAC,SAGO,CACHC,KAAM,SAASC,SAAUC,KAAMC,WAAYC,SAEvCC,QAAQC,IAAI,gCACZD,QAAQC,IAAI,4BAA6BL,SAAU,SAAUC,KAAM,gBAAiBC,YACpFE,QAAQC,IAAI,0BAA2BF,aAEnCG,GAAKC,SAASC,cAAc,yBAC3BF,IAKUC,SAASE,eAAe,oBAAoBC,gBAUvDC,cAAgBJ,SAASC,cAAc,gBACvCI,QAAUD,cAAgBA,cAAcE,MAAQ,EAEhDC,cAAgBP,SAASC,cAAc,sBACvCM,eACAA,cAAcC,iBAAiB,SAAS,WACpCR,SAASS,KAAKC,UAAUC,OAAO,0BAC3BX,SAASS,KAAKC,UAAUE,SAAS,0BACjCL,cAAcJ,YAAc,wBAE5BI,cAAcJ,YAAc,wBA6EpCU,yBAhDoBjB,aAChBiB,gBAAkB,CAClB,CACIC,UAAW,eACXC,eAAgB,eAChBC,SAAU,SACVC,YAAY,EACZC,MAAO,YAKftB,QAAQuB,SAAQ,SAASC,KACrBP,gBAAgBQ,KAAK,CACjBC,MAAOF,IAAIE,MACXC,MAAOH,IAAIG,MACXP,SAAUI,IAAIJ,SACdC,WAAYG,IAAIH,WAChBC,MAAOE,IAAIF,MACXM,aAAc,QACdC,SAAU,SAASC,aAC6B,IAArCA,KAAKC,SAASC,UAAUC,UAEnCC,OAAQ,gBAKhBjB,gBAAgBQ,KAAK,CACjBC,MAAO,QACPC,MAAO,WACPP,SAAU,OACVC,YAAY,EACZC,MAAO,IACPM,aAAc,QACdC,UAAU,EACVX,UAAW,SAASY,KAAMK,qBAClBzB,MAAQoB,KAAKM,kBACwB,IAArCN,KAAKC,SAASC,UAAUC,SACjB,gEAAkEvB,MAEtEA,SAIRO,gBAGWoB,CAAerC,SAErCR,KAAK8C,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CACF3C,SAAUA,SACVC,KAAMA,KACN2C,eAAgB1C,WAChBU,QAASA,YAEb,GAAGiC,MAAK,SAASC,UACjB1C,QAAQC,IAAI,iCAAkCyC,SAASC,OAAQ,eAE3DC,yBAhFyBF,cACzBG,cAAgBC,EAAEC,IAAIC,OACtBC,UAAYP,SAASQ,MAAK,SAASC,cAC5BA,MAAMH,QAAUH,wBAGvBI,WAAaA,UAAUG,SAChBH,UAAUG,SAIdN,EAAEC,IAAIM,UAAYP,EAAEC,IAAIK,UAAY,KAqErBE,CAAwBZ,UAE1Ca,MAAQ,IAAIjE,UAAUY,GAAI,CAC1BsD,KAAMd,SACN3C,QAASiB,gBACTyC,OAAQ,eACRC,OAAQ,OACRrC,MAAO,OACPsC,YAAY,EACZC,eAAgB,GAChBC,YAAa,8BACbC,aAAc,SAASC,KAEG,IADXA,IAAIhC,UACNC,WACL+B,IAAIC,aAAaC,MAAMC,gBAAkB,UACzCH,IAAIC,aAAanD,UAAUsD,IAAI,cAGvCC,YAAY,IAIhBb,MAAMc,qBAAqB,WAAYzB,0BAOVW,MAAOX,qBAC5B0B,QAAUnE,SAASC,cAAc,mBAChCkE,aAIDC,gBAAkBpE,SAASqE,cAAc,OAC7CD,gBAAgBE,UAAY,oBAC5BF,gBAAgBG,aAAa,OAAQ,aAEjCC,aAAexE,SAASqE,cAAc,UAC1CG,aAAaF,UAAY,8BACzBE,aAAaD,aAAa,OAAQ,UAClCC,aAAaC,UAAY,wCACzBD,aAAalD,MAAQ,iDAEjBoD,iBAAkB,EAEtBF,aAAahE,iBAAiB,SAAS,WAC/BkE,iBACAtB,MAAMuB,kBAAkB,YACxBH,aAAaC,UAAY,wCACzBD,aAAaF,UAAY,mCACzBI,iBAAkB,IAElBtB,MAAMc,qBAAqB,WAAYzB,iBACvC+B,aAAaC,UAAY,wCACzBD,aAAaF,UAAY,8BACzBI,iBAAkB,MAI1BN,gBAAgBQ,YAAYJ,cAC5BL,QAAQS,YAAYR,kBAGxBS,CAAoBzB,MAAOX,iBAG3BW,MAAM0B,GAAG,cAAc,SAASpD,UACxBqD,YAAcrD,KAAKC,SAASC,UAEhCxC,KAAK8C,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CACF4C,GAAID,YAAYC,GAChBzD,MAAOG,KAAKuD,WACZ3E,MAAOoB,KAAKM,eAEhB,GAAGM,MAAK,SAASC,UACjB1C,QAAQC,IAAI,+CACboF,MAAK,SAASC,OACbtF,QAAQsF,MAAM,sCAAuCA,OACrDC,MAAM,sCAKdhC,MAAM0B,GAAG,eAAe,SAASO,EAAGzB,SAC5BP,KAAOO,IAAIhC,aACO,IAAlByB,KAAKxB,SAAgB,KACjByD,QAAU3C,EAAEC,IAAI2C,QAAU,gCAAkC7F,KAAO,YAAc2D,KAAK2B,GAC1FQ,OAAOC,KAAKH,iBAKhBI,YAAc1F,SAASC,cAAc,oBACrCyF,aACAA,YAAYlF,iBAAiB,SAAS,eAC9BmF,YAAcC,KAAKtF,MAAMuF,cAC7BzC,MAAM0C,WAAU,SAASzC,aACdzD,QAAQmG,MAAK,SAAS3E,SACrBG,MAAQH,IAAIG,MACZyE,WAAa3C,KAAK9B,cACfyE,YAAcA,WAAWC,WAAWJ,cAAcK,SAASP,0BAO9EQ,eAAiBnG,SAASC,cAAc,oBACxCkG,gBACAA,eAAe3F,iBAAiB,SAAS,eACjC4F,aAAehD,MAAMiD,qBACpBD,aAAa5D,YAKd8D,eAAiBtG,SAASC,cAAc,kBACvCqG,gBAAmBA,eAAehG,WAKnCiG,KAAOvG,SAASqE,cAAc,QAClCkC,KAAKC,OAAS,OACdD,KAAKE,OAASN,eAAeO,QAAQD,QAAU,mBAE3CE,QAAU3G,SAASqE,cAAc,SACrCsC,QAAQC,KAAO,SACfD,QAAQE,KAAO,KACfF,QAAQrG,MAAQZ,KAChB6G,KAAK3B,YAAY+B,aAEbG,cAAgB9G,SAASqE,cAAc,SAC3CyC,cAAcF,KAAO,SACrBE,cAAcD,KAAO,aACrBC,cAAcxG,MAAQgG,eAAehG,MACrCiG,KAAK3B,YAAYkC,eAEjBV,aAAajF,SAAQ,SAAS6B,WACtB+D,MAAQ/G,SAASqE,cAAc,SACnC0C,MAAMH,KAAO,SACbG,MAAMF,KAAO,aACbE,MAAMzG,MAAQ0C,MAAMgC,GACpBuB,KAAK3B,YAAYmC,cAGjBC,eAAiBhH,SAASE,eAAe,qBACzC8G,gBAAkBA,eAAe1G,MAAO,KACpCyG,MAAQ/G,SAASqE,cAAc,SACnC0C,MAAMH,KAAO,SACbG,MAAMF,KAAO,iBACbE,MAAMzG,MAAQ0G,eAAe1G,MAC7BiG,KAAK3B,YAAYmC,OAGrB/G,SAASS,KAAKmE,YAAY2B,MAC1BA,KAAKU,cAtCD7B,MAAM,sDANNA,MAAM,qDAiDd8B,eAAiBlH,SAASC,cAAc,qBACxCiH,gBACAA,eAAe1G,iBAAiB,SAAS,eACjC4F,aAAehD,MAAMiD,qBACpBD,aAAa5D,UAKU,IAAxB4D,aAAa5D,OAAc,KAEvBwC,GAAKoB,aAAa,GAAGpB,GACrBmC,IAAMxE,EAAEC,IAAI2C,QAAU,gCAAkC7F,KAAO,YAAcsF,GACjFQ,OAAO4B,SAASC,KAAOF,QACpB,KAECG,IAAMlB,aAAamB,KAAI,SAASC,UACzBA,EAAExC,MAETyC,QAAU,IAAIC,IAAI/E,EAAEC,IAAI2C,QAAU,kCACtCkC,QAAQE,aAAaC,OAAO,KAAMlI,MAClC+H,QAAQE,aAAaC,OAAO,WAAYN,IAAIO,KAAK,MACjDrC,OAAOC,KAAKgC,QAAQxB,iBAjBpBb,MAAM,qCAuBd0C,oBAAsB9H,SAASC,cAAc,0BAC7C6H,qBACAA,oBAAoBtH,iBAAiB,SAAS,eACtC4F,aAAehD,MAAMiD,qBACpBD,aAAa5D,YAKduF,SAAW3B,aAAamB,KAAI,SAASvE,cAC9BA,MAAMgC,MAEjB5F,KAAK8C,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CACF2F,SAAUA,SACVrI,KAAMA,SAEV,GAAG4C,MAAK,SAASC,UACjBA,SAASpB,SAAQ,SAAS6G,UACtB5E,MAAM6E,gBAAgB,CAACD,cAE3B5E,MAAM8E,iBACPhD,MAAK,SAASC,OACbtF,QAAQsF,MAAM,4CAA6CA,OAC3DC,MAAM,0CApBNA,MAAM,yCA0Bd+C,gBAAkBnI,SAASC,cAAc,sBACzCkI,iBACAA,gBAAgB3H,iBAAiB,SAAS,eAClC4F,aAAehD,MAAMiD,sBACpBD,aAAa5D,OAAQ,KAClB4F,SAAWpI,SAASC,cAAc,iBAClCoI,OAASD,SAAWA,SAASnI,cAAc,UAAY,YACvDoI,SACAA,OAAOC,UAAW,EAClBC,YAAW,WACPF,OAAOG,gBAAgB,cACxB,WAEHJ,WACAA,SAAS1H,UAAUsD,IAAI,WACvBuE,YAAW,WACPH,SAAS1H,UAAU+H,OAAO,aAC3B,WAKPV,SAAW3B,aAAamB,KAAI,SAASvE,cAC9BA,MAAMgC,MAEjB5F,KAAK8C,KAAK,CAAC,CACPC,WAAY,gCACZC,KAAM,CACF2F,SAAUA,SACVrI,KAAMA,SAEV,GAAG4C,MAAK,SAASC,UACjBA,SAASpB,SAAQ,SAASuH,cACtBtF,MAAM6E,gBAAgB,CAACS,kBAE3BtF,MAAM8E,iBACPhD,MAAK,SAASC,OACbtF,QAAQsF,MAAM,yCAA0CA,OACxDC,MAAM,6CAMduD,iBAAmB3I,SAASC,cAAc,uBAC1C0I,kBACAA,iBAAiBnI,iBAAiB,SAAS,eACnC4F,aAAehD,MAAMiD,qBACpBD,aAAa5D,UAKC4D,aAAawC,QAAO,SAAS5F,cACpCA,MAAM6F,WAEDrG,SAAW4D,aAAa5D,WAKpCsG,QAAQ,qDAITf,SAAW3B,aAAamB,KAAI,SAASvE,cAC9BA,MAAMgC,MAEjB5F,KAAK8C,KAAK,CAAC,CACPC,WAAY,iCACZC,KAAM,CACF2F,SAAUA,SACVrI,KAAMA,SAEV,GAAG4C,MAAK,SAASC,UACjBwF,SAAS5G,SAAQ,SAAS6D,IACtB5B,MAAM2F,UAAU/D,UAErBE,MAAK,SAASC,OACbtF,QAAQsF,MAAM,yCAA0CA,OACxDC,MAAM,yCAvBNA,MAAM,8CARNA,MAAM,wCAqCd4D,eAAiBhJ,SAASC,cAAc,qBACxC+I,gBACAA,eAAexI,iBAAiB,SAAS,eACjC4F,aAAehD,MAAMiD,kBACpBD,aAAa5D,OAKlBpD,KAAK8C,KAAK,CAAC,CACPC,WAAY,uCACZC,KAAM,CACF3C,SAAUA,aAEd,GAAG6C,MAAK,SAAS2G,eAMbC,cALCD,UAAUzG,WAMU,IAArByG,UAAUzG,QACV0G,WAAaD,UAAU,GAAGvJ,SAO1BqI,SAAW3B,aAAamB,KAAI,SAASvE,cAC9BA,MAAMgC,MAEjB5F,KAAK8C,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,CACF2F,SAAUA,SACVmB,WAAYA,eAEhB,GAAG5G,MAAK,SAASC,UACjBwF,SAAS5G,SAAQ,SAAS6D,IACtB5B,MAAM2F,UAAU/D,UAErBE,MAAK,SAASC,OACbtF,QAAQsF,MAAM,uCAAwCA,OACtDC,MAAM,4CA5BNA,MAAM,wCAXVA,MAAM,4CA8Cd+D,YAAcnJ,SAASC,cAAc,gBACrCkJ,aACAA,YAAY3I,iBAAiB,UAAU,eAC/B4I,gBAAkBxD,KAAKtF,MACvB+I,eAAiBrJ,SAASC,cAAc,iBACxCqJ,kBAAoBD,eAAiBA,eAAe/I,MAAQ,GAC5DiJ,sBAAwBnG,MAAMoG,qBAAqB,aAAe,GAEtEpK,KAAK8C,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CACF3C,SAAUgK,SAAShK,UACnBC,KAAM+J,SAAS/J,MACf2C,eAAgBiH,kBAChBjJ,QAASoJ,SAASL,qBAEtB,GAAG9G,MAAK,SAASoH,aACjBtG,MAAMuG,QAAQD,aACVH,uBACAnG,MAAMc,qBAAqB,WAAYqF,0BAE5CK,OAAM,SAASzE,OACdtF,QAAQsF,MAAM,2CAA4CA,iBAMlE0E,aAAe7J,SAASC,cAAc,iBACtC4J,cACAA,aAAarJ,iBAAiB,UAAU,eAChCsJ,cAAgBlE,KAAKtF,MAGzBlB,KAAK8C,KAAK,CAAC,CACPC,WAAY,iCACZC,KAAM,CACF2H,YAAa,CAAC,CACVlD,KAAM,gCACNvG,MAAOwJ,oBAGfE,MAAK,eAED7C,IAAM,IAAIO,IAAIlC,OAAO4B,UACrB0C,cACA3C,IAAIQ,aAAasC,IAAI,aAAcH,eAEnC3C,IAAIQ,aAAauC,OAAO,cAE5B1E,OAAO4B,SAASC,KAAOF,IAAIlB,cAC5B2D,OAAM,SAASzE,OACdtF,QAAQsF,MAAM,iDAAkDA,WAE5DgC,IAAM,IAAIO,IAAIlC,OAAO4B,UACrB0C,cACA3C,IAAIQ,aAAasC,IAAI,aAAcH,eAEnC3C,IAAIQ,aAAauC,OAAO,cAE5B1E,OAAO4B,SAASC,KAAOF,IAAIlB,iBAMvC7C,MAAM+G,YAEPjF,MAAK,SAASC,OACbtF,QAAQsF,MAAM,wCAAyCA,OACvDC,MAAM,2CAjiBNvF,QAAQuK,KAAK"}