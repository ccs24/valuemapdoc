{"version":3,"file":"tabulatormap.min.js","sources":["../src/tabulatormap.js"],"sourcesContent":["/* eslint-env es6 */\n/* eslint no-trailing-spaces: \"off\", \n          no-unused-vars: \"off\" */\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\ndefine('mod_valuemapdoc/tabulatormap', [\n    'mod_valuemapdoc/tabulatorlib', \n    'core/ajax', \n    'core_user/repository',\n    'core/notification',\n    'jquery'\n], function(\n    Tabulator, \n    Ajax, \n    UserRepository,\n    Notification,\n    $\n) {\n\n    return {\n        init: function(courseid, cmid, filtercmid) {\n            console.log('[tabulatormap] Module loaded');\n            console.log('[tabulatormap] Course ID:', courseid, 'CM ID:', cmid, 'Filter CM ID:', filtercmid);\n\n        var columns = document.querySelector('#valuemap-columns').textContent;\n            console.log('[DEBUG] Columns received:', columns);\n            if (!columns) {\n                console.warn('[tabulatormap] Columns not found');\n                return;\n            }\n\n            // Parse columns if string\n            if (typeof columns === 'string') {\n                try {\n                    columns = JSON.parse(columns);\n                    console.log('[DEBUG] Parsed columns:', columns);\n                } catch (e) {\n                    console.error('[tabulatormap] Error parsing columns:', e);\n                    return;\n                }\n            }\n\n            if (!Array.isArray(columns)) {\n                console.error('[tabulatormap] Columns is not an array');\n                return;\n            }\n\n            var el = document.querySelector('#valuemap-table-js');\n            if (!el) {\n                console.warn('[tabulatormap] Table element not found');\n                return;\n            }\n\n            var groupfilterEl = document.querySelector('#groupfilter');\n            var groupid = groupfilterEl ? parseInt(groupfilterEl.value) || 0 : 0;\n            var fullscreenBtn = document.querySelector('#toggle-fullscreen');\n            var table; // Declare table variable\n\n            if (fullscreenBtn) {\n                fullscreenBtn.addEventListener('click', function() {\n                    document.body.classList.toggle('valuemapdoc-fullscreen');\n                    if (document.body.classList.contains('valuemapdoc-fullscreen')) {\n                        fullscreenBtn.textContent = '‚ùé Zamknij pe≈Çny ekran';\n                    } else {\n                        fullscreenBtn.textContent = 'üî≥ Pe≈Çny ekran';\n                    }\n                });        \n            }\n\n            /**\n             * Get username from response data for current user\n             * @param {Array} response Response data from server\n             * @returns {string} Current user's username\n             */\n            function getUsernameFromResponse(response) {\n                var currentUserId = M.cfg.userid;\n                var userEntry = response.find(function(entry) {\n                    return entry.userid == currentUserId;\n                });\n                \n                if (userEntry && userEntry.username) {\n                    return userEntry.username;\n                }\n                \n                return M.cfg.fullname || M.cfg.username || 'Ja';\n            }\n\n            /**\n             * Generate Tabulator columns with editable fields and username column\n             * @param {Array} columns Array of column definitions received from dataset\n             * @returns {Array} Enhanced column definitions with selection and username\n             */\n            function prepareColumns(columns) {\n                var enhancedColumns = [\n                    {\n                        formatter: \"rowSelection\",\n                        titleFormatter: \"rowSelection\",\n                        hozAlign: \"center\",\n                        headerSort: false,\n                        width: 50\n                    }\n                ];\n                \n                // Add mapped columns\n                columns.forEach(function(col) {\n                    enhancedColumns.push({\n                        title: col.title,\n                        field: col.field,\n                        hozAlign: col.hozAlign,\n                        headerSort: col.headerSort,\n                        width: col.width,\n                        headerFilter: \"input\",\n                        editable: function(cell) {\n                            return cell.getRow().getData().ismaster !== 1;\n                        },\n                        editor: \"textarea\"\n                    });\n                });\n                \n                // Add username column\n                enhancedColumns.push({\n                    title: \"Autor\",\n                    field: \"username\", \n                    hozAlign: \"left\",\n                    headerSort: true,\n                    width: 120,\n                    headerFilter: \"input\",\n                    editable: false,\n                    formatter: function(cell, formatterParams) {\n                        var value = cell.getValue();\n                        if (cell.getRow().getData().ismaster === 1) {\n                            return '<i class=\"fa fa-star text-warning\" title=\"Master entry\"></i> ' + value;\n                        }\n                        return value;\n                    }\n                });\n\n                return enhancedColumns;\n            }\n\n            var enhancedColumns = prepareColumns(columns);\n\n            Ajax.call([{\n                methodname: 'mod_valuemapdoc_get_entries',\n                args: {\n                    courseid: parseInt(courseid),\n                    cmid: parseInt(cmid),\n                    include_master: filtercmid ? parseInt(filtercmid) : 0,\n                    groupid: groupid\n                },\n            }])[0].done(function(response) {\n                console.log('[tabulatormap] Entries loaded:', response.length, 'records');\n\n                var currentUsername = getUsernameFromResponse(response);\n\n                table = new Tabulator(el, {\n                    data: response,\n                    columns: enhancedColumns,\n                    layout: \"fitDataTable\",\n                    height: \"100%\",\n                    width: \"100%\",\n                    pagination: true,\n                    paginationSize: 20,\n                    placeholder: \"Brak danych do wy≈õwietlenia\",\n                    rowFormatter: function(row) {\n                        var data = row.getData();\n                        if (data.ismaster === 1) {\n                            row.getElement().style.backgroundColor = '#eaffea';\n                            row.getElement().classList.add('ismaster');\n                        }\n                    },\n                    selectable: true,\n                });\n\n                /**\n                 * Function to reload table data from server\n                 */\n                function reloadTableData() {\n                    Ajax.call([{\n                        methodname: 'mod_valuemapdoc_get_entries',\n                        args: {\n                            courseid: parseInt(courseid),\n                            cmid: parseInt(cmid),\n                            include_master: filtercmid ? parseInt(filtercmid) : 0,\n                            groupid: groupid\n                        },\n                    }])[0].done(function(response) {\n                        console.log('[tabulatormap] Table data reloaded');\n                        table.setData(response);\n                    }).fail(function(error) {\n                        console.error('[tabulatormap] Error reloading data:', error);\n                    });\n                }\n\n                // Wait for table to build before setup\n                table.on(\"tableBuilt\", function(){\n                    console.log('[tabulatormap] Table built successfully');\n                    \n                    // Set default filter to show only current user's entries\n                    table.setHeaderFilterValue(\"username\", currentUsername);\n                    \n                    // Add user filter toggle\n                    addUserFilterToggle(table, currentUsername);\n                });\n\n                // Selection change handler - show/hide bulk actions\n                table.on(\"rowSelectionChanged\", function(data, rows){\n                    var bulkActions = document.querySelector('#bulk-actions');\n                    if (bulkActions) {\n                        if (data.length > 0) {\n                            bulkActions.style.display = 'block';\n                        } else {\n                            bulkActions.style.display = 'none';\n                        }\n                    }\n                    var generateButton = document.querySelector('#generate-button');\n                    if (generateButton) {\n                            if (data.length > 0) {\n                                generateButton.disabled = false;\n                                generateButton.removeAttribute('disabled');\n                                generateButton.classList.remove('disabled');\n                            } else {\n                                generateButton.setAttribute('disabled', true);\n                                generateButton.classList.add('disabled');\n                                generateButton.disabled = true;\n                            }\n                    }   \n                });\n                // Po utworzeniu tabeli dodaj:\ntable.on(\"cellClick\", function(e, cell){\n    console.log('[DEBUG] Cell clicked:', cell.getField(), 'editable:', cell.getColumn().getDefinition().editable);\n});\n\ntable.on(\"cellEditing\", function(cell){\n    console.log('[DEBUG] Cell editing started:', cell.getField());\n});\n\ntable.on(\"cellEditCancelled\", function(cell){\n    console.log('[DEBUG] Cell edit cancelled:', cell.getField());\n});\n\n                // Handle cell editing\n                table.on(\"cellEdited\", function(cell){\n                    var updatedData = cell.getRow().getData();\n\n                    Ajax.call([{\n                        methodname: 'mod_valuemapdoc_update_cell',\n                        args: {\n                            id: updatedData.id,\n                            field: cell.getField(),\n                            value: cell.getValue()\n                        }\n                    }])[0].done(function(response) {\n                        console.log('[tabulatormap] Cell updated successfully');\n                        // Optional: reload table data to ensure sync with database\n                        // reloadTableData();\n                    }).fail(function(error) {\n                        console.error('[tabulatormap] Error updating cell:', error);\n                        alert('Nie uda≈Ço siƒô zapisaƒá zmian.');\n                        // Revert cell value on error\n                        cell.restoreOldValue();\n                    });\n                });\n\n                // Handle double-click to open edit form\n                table.on(\"rowDblClick\", function(e, row){\n                    var data = row.getData();\n                    // if (data.ismaster === 1) {\n                        var rateUrl = M.cfg.wwwroot + '/mod/valuemapdoc/edit.php?id=' + cmid + '&entryid=' + data.id;\n                        window.open(rateUrl);\n                    // }\n                });\n\n                /**\n                 * Add user filter toggle button\n                 * @param {Object} table Tabulator instance\n                 * @param {string} currentUsername Current user's username\n                 */\n                function addUserFilterToggle(table, currentUsername) {\n                    var toolbar = document.querySelector('.btn-toolbar');\n                    if (!toolbar) { \n                        return;\n                    }\n\n                    var filterContainer = document.createElement('div');\n                    filterContainer.className = 'btn-group ms-auto';\n                    filterContainer.setAttribute('role', 'group');\n\n                    var toggleButton = document.createElement('button');\n                    toggleButton.className = 'btn btn-outline-info btn-sm';\n                    toggleButton.setAttribute('type', 'button');\n                    toggleButton.innerHTML = '<i class=\"fa fa-user\"></i> Tylko moje';\n                    toggleButton.title = 'Prze≈ÇƒÖcz miƒôdzy moimi wpisami a wszystkimi';\n\n                    var showingOnlyMine = true;\n\n                    toggleButton.addEventListener('click', function() {\n                        if (showingOnlyMine) {\n                            table.clearHeaderFilter(\"username\");\n                            toggleButton.innerHTML = '<i class=\"fa fa-users\"></i> Wszystkie';\n                            toggleButton.className = 'btn btn-outline-secondary btn-sm';\n                            showingOnlyMine = false;\n                        } else {\n                            table.setHeaderFilterValue(\"username\", currentUsername);\n                            toggleButton.innerHTML = '<i class=\"fa fa-user\"></i> Tylko moje';\n                            toggleButton.className = 'btn btn-outline-info btn-sm';\n                            showingOnlyMine = true;\n                        }\n                    });\n\n                    filterContainer.appendChild(toggleButton);\n                    toolbar.appendChild(filterContainer);\n                }\n\n                // Global search functionality\n                var searchInput = document.querySelector('#valuemap-search');\n                if (searchInput) {\n                    searchInput.addEventListener('input', function() {\n                        var filterValue = this.value.toLowerCase();\n                        table.setFilter(function(data) {\n                            return columns.some(function(col) {\n                                var field = col.field;\n                                var fieldValue = data[field];\n                                return fieldValue && fieldValue.toString().toLowerCase().includes(filterValue);\n                            });\n                        });\n                    });\n                }\n\n                // Edit button functionality\n                var editBulkButton = document.querySelector('#edit-bulk-button');\n                if (editBulkButton) {\n                    editBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Proszƒô zaznaczyƒá co najmniej jeden rekord.');\n                            return;\n                        }\n\n                        if (selectedData.length === 1) {\n                            // Single entry - open regular edit form\n                            var id = selectedData[0].id;\n                            var url = M.cfg.wwwroot + '/mod/valuemapdoc/edit.php?id=' + cmid + '&entryid=' + id;\n                            window.location.href = url;\n                        } else {\n                            // Multiple entries - open bulk edit form\n                            var ids = selectedData.map(function(r) {\n                                return r.id;\n                            });\n                            var bulkUrl = new URL(M.cfg.wwwroot + '/mod/valuemapdoc/edit_bulk.php');\n                            bulkUrl.searchParams.append('id', cmid);\n                            bulkUrl.searchParams.append('entryids', ids.join(','));\n                            window.open(bulkUrl.toString());\n                        }\n                    });\n                }\n\n                // Duplicate button functionality\n                var duplicateBulkButton = document.querySelector('#duplicate-bulk-button');\n                if (duplicateBulkButton) {\n                    duplicateBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Zaznacz rekordy do powielenia.');\n                            return;\n                        }\n\n                        var entryids = selectedData.map(function(entry) {\n                            return entry.id;\n                        });\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_create_entries_bulk',\n                            args: {\n                                entryids: entryids,\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            console.log('[tabulatormap] Entries duplicated successfully');\n                            \n                            // Refresh table data from database\n                            reloadTableData();\n                            table.deselectRow();\n                        }).fail(function(error) {\n                            console.error('[tabulatormap] Error duplicating entries:', error);\n                            alert('Nie uda≈Ço siƒô powieliƒá wpis√≥w.');\n                        });\n                    });\n                }\n\n                // Add empty line functionality  \n                var emptyBulkButton = document.querySelector('#empty-bulk-button');\n                if (emptyBulkButton) {\n                    emptyBulkButton.addEventListener('click', function() {\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_create_entries_bulk',\n                            args: {\n                                entryids: [], // Empty array for new entry\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            console.log('[tabulatormap] Empty entry created');\n                            reloadTableData();\n                            table.deselectRow();\n                        }).fail(function(error) {\n                            console.error('[tabulatormap] Error creating empty entries:', error);\n                            alert('Nie uda≈Ço siƒô utworzyƒá pustego wpisu.');\n                        });\n                    });\n                }\n\n                // Delete button functionality\n                var deleteBulkButton = document.querySelector('#delete-bulk-button');\n                if (deleteBulkButton) {\n                    deleteBulkButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Zaznacz rekordy do usuniƒôcia.');\n                            return;\n                        }\n\n                        if (!confirm('Czy na pewno chcesz usunƒÖƒá zaznaczone wpisy?')) {\n                            return;\n                        }\n\n                        var entryids = selectedData.map(function(entry) {\n                            return entry.id;\n                        });\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_delete_bulk',\n                            args: {\n                                entryids: entryids,\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            console.log('[tabulatormap] Entries deleted successfully');\n                            reloadTableData();\n                        }).fail(function(error) {\n                            console.error('[tabulatormap] Error deleting entries:', error);\n                            alert('Nie uda≈Ço siƒô usunƒÖƒá wpis√≥w.');\n                        });\n                    });\n                }\n\n                // Generate button functionality\n                var generateButton = document.querySelector('#generate-button');\n                if (generateButton) {\n                    generateButton.addEventListener('click', function() {\n                        var selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert('Proszƒô zaznaczyƒá co najmniej jeden rekord.');\n                            return;\n                        }\n\n                        var templateSelect = document.querySelector('#templateid');\n//                        console.log('[DEBUG] templateSelect element:', templateSelect);\n//                        console.log('[DEBUG] templateSelect value:', templateSelect ? templateSelect.value : 'element not found');\n                    \n                        if (!templateSelect || !templateSelect.value) {\n                            alert('Wybierz szablon przed generowaniem dokumentu.');\n                            return;\n                        }\n\n                        var entryIds = selectedData.map(function(entry) {\n                            return entry.id;\n                        });\n\n                        var form = document.createElement('form');\n                        form.method = 'post';\n                        form.action = M.cfg.wwwroot + '/mod/valuemapdoc/generate.php';\n                        \n                        var inputs = {\n                            'id': cmid,\n                            'templateid': templateSelect.value,\n                            'entryids': entryIds\n                        };\n\n                        for (var name in inputs) {\n                            var input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = name;\n                            input.value = Array.isArray(inputs[name]) ? inputs[name].join(',') : inputs[name];\n                            form.appendChild(input);\n                        }\n\n                        document.body.appendChild(form);\n                        form.submit();\n                    });\n                }\n\n            }).fail(function(error) {\n                console.error('[tabulatormap] Error loading entries:', error);\n                alert('B≈ÇƒÖd podczas ≈Çadowania danych: ' + (error.message || 'Nieznany b≈ÇƒÖd'));\n            });\n        }\n    };\n});"],"names":["define","Tabulator","Ajax","UserRepository","Notification","$","init","courseid","cmid","filtercmid","console","log","columns","document","querySelector","textContent","JSON","parse","e","error","Array","isArray","el","table","groupfilterEl","groupid","parseInt","value","fullscreenBtn","addEventListener","body","classList","toggle","contains","enhancedColumns","formatter","titleFormatter","hozAlign","headerSort","width","forEach","col","push","title","field","headerFilter","editable","cell","getRow","getData","ismaster","editor","formatterParams","getValue","prepareColumns","call","methodname","args","include_master","done","response","length","currentUsername","currentUserId","M","cfg","userid","userEntry","find","entry","username","fullname","getUsernameFromResponse","reloadTableData","setData","fail","data","layout","height","pagination","paginationSize","placeholder","rowFormatter","row","getElement","style","backgroundColor","add","selectable","on","setHeaderFilterValue","toolbar","filterContainer","createElement","className","setAttribute","toggleButton","innerHTML","showingOnlyMine","clearHeaderFilter","appendChild","addUserFilterToggle","rows","bulkActions","display","generateButton","disabled","removeAttribute","remove","getField","getColumn","getDefinition","updatedData","id","alert","restoreOldValue","rateUrl","wwwroot","window","open","searchInput","filterValue","this","toLowerCase","setFilter","some","fieldValue","toString","includes","editBulkButton","selectedData","getSelectedData","url","location","href","ids","map","r","bulkUrl","URL","searchParams","append","join","duplicateBulkButton","entryids","deselectRow","emptyBulkButton","deleteBulkButton","confirm","templateSelect","entryIds","form","method","action","inputs","name","input","type","submit","message","warn"],"mappings":"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"}