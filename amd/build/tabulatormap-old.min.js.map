{"version":3,"file":"tabulatormap-old.min.js","sources":["../src/tabulatormap-old.js"],"sourcesContent":["/* eslint no-trailing-spaces: \"off\", no-unused-vars: \"off\" */\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable jsdoc/require-param */\ndefine('mod_valuemapdoc/tabulatormap', [\n    'mod_valuemapdoc/tabulatorlib', \n    'core/ajax', \n    'core_user/repository',\n    'core/notification',\n    'jquery'\n], function(\n    Tabulator, \n    Ajax, \n    UserRepository,\n    Notification,\n    $\n) {\n    \n    /**\n     * Hierarchy Selector functionality integrated into tabulatormap\n     */\n    var HierarchySelector = {\n        cmid: null,\n        \n        init: function(cmid) {\n            this.cmid = cmid;\n            this.setupEventListeners();\n            this.initializeState();\n        },\n\n        setupEventListeners: function() {\n            var self = this;\n            \n            // Market selector change\n            $(document).on('change', 'select[data-hierarchy-level=\"market\"]', function() {\n                var marketId = $(this).val();\n                self.loadChildren(marketId, 'customer');\n                self.clearChildSelectors(['customer', 'person', 'opportunity']);\n            });\n\n            // Customer selector change  \n            $(document).on('change', 'select[data-hierarchy-level=\"customer\"]', function() {\n                var customerId = $(this).val();\n                if (customerId > 0) {\n                    self.loadChildren(customerId, 'person');\n                    self.loadChildren(customerId, 'opportunity');\n                } else {\n                    self.clearChildSelectors(['person', 'opportunity']);\n                }\n            });\n\n            // Person and Opportunity selector changes\n            $(document).on('change', 'select[data-hierarchy-level=\"person\"], select[data-hierarchy-level=\"opportunity\"]', function() {\n                self.updateSummary();\n            });\n\n            // Reset button click\n            $(document).on('click', '#hierarchy-reset-button', function() {\n                self.reset();\n            });\n        },\n\n        initializeState: function() {\n                        console.log('initializeState', this.cmid);\n\n            // Load initial markets\n            this.loadInitialMarkets();\n            \n            // Show/hide selectors based on current values\n            this.updateVisibility();\n            \n            // Update summary\n            this.updateSummary();\n        },\n\n        loadInitialMarkets: function() {\n            var self = this;\n            var marketSelector = $('select[data-hierarchy-level=\"market\"]');\n            console.log('lenghts:' .marketSelector.length );\n            \n            if (marketSelector.length === 0) {\n//                return;\n            }\n\n            // Load markets via AJAX\n            var request = {\n                methodname: 'mod_valuemapdoc_get_markets',\n                args: {\n                    cmid: this.cmid,\n                    parentid: 0, // Root level for markets\n                    childtype: 'market'\n                }\n            };\n\n            console.log(`[Load markets] Fetching data for market cmid=${this.cmid}, parent=0`);\n\n            Ajax.call([request])[0].done(function(response) {\n                console.log('üîç Initial markets loaded:', response);\n                if (response.success && response.options) {\n                    // Update market selector with real options\n                    marketSelector.empty();\n                    response.options.forEach(function(option) {\n                        marketSelector.append('<option value=\"' + option.value + '\">' + option.text + '</option>');\n                    });\n                }\n            }).fail(function(error) {\n                console.error('Error loading initial markets:', error);\n                // Keep default placeholder option\n            });\n        },\n\n        loadChildren: function(parentId, childType) {\n            var self = this;\n            var selector = $('select[data-hierarchy-level=\"' + childType + '\"]');\n            \n            if (selector.length === 0) {\n                return Promise.resolve();\n            }\n\n            // Show loading state\n            selector.prop('disabled', true);\n            selector.html('<option value=\"0\">≈Åadowanie...</option>');\n\n            var request = {\n                methodname: 'mod_valuemapdoc_get_markets',\n                args: {\n                    cmid: this.cmid,\n                    parentid: parseInt(parentId),\n                    childtype: childType\n                }\n            };\n\n            console.log(`[Load children] Fetching data for ${childType}, cmid=${this.cmid}, parent=${parentId}`);\n\n\n            return Ajax.call([request])[0].done(function(response) {\n                console.log('üîç Loaded children for', childType, ':', response);\n                if (response.success) {\n                    self.updateSelectorOptions(selector, response.options);\n                    selector.prop('disabled', false);\n                    self.updateVisibility();\n                    return response;\n                } else {\n                    throw new Error('Failed to load ' + childType + ' options');\n                }\n            }).fail(function(error) {\n                console.error('Error loading children:', error);\n                Notification.addNotification({\n                    message: 'Error loading ' + childType + ' options: ' + error.message,\n                    type: 'error'\n                });\n                selector.prop('disabled', false);\n                selector.html('<option value=\"0\">-- Wybierz --</option>');\n                throw error;\n            });\n        },\n\n        updateSelectorOptions: function(selector, options) {\n            selector.empty();\n            \n            options.forEach(function(option) {\n                var optionElement = $('<option></option>')\n                    .attr('value', option.value)\n                    .text(option.text);\n                \n                if (option.selected) {\n                    optionElement.prop('selected', true);\n                }\n                \n                selector.append(optionElement);\n            });\n        },\n\n        clearChildSelectors: function(levels) {\n            var self = this;\n            \n            levels.forEach(function(level) {\n                var selector = $('select[data-hierarchy-level=\"' + level + '\"]');\n                if (selector.length > 0) {\n                    selector.empty();\n                    var placeholder = '-- ' + level.charAt(0).toUpperCase() + level.slice(1) + ' --';\n                    selector.append('<option value=\"0\">' + placeholder + '</option>');\n                    selector.val(0);\n                }\n            });\n            \n            this.updateVisibility();\n        },\n\n        updateVisibility: function() {\n            var marketValue = $('select[data-hierarchy-level=\"market\"]').val() || 0;\n            var customerValue = $('select[data-hierarchy-level=\"customer\"]').val() || 0;\n            var resetButton = $('#hierarchy-reset-button');\n\n            // Customer selector\n            var customerContainer = $('select[data-hierarchy-level=\"customer\"]').closest('.input-group');\n            if (marketValue > 0) {\n                customerContainer.show();\n            } else {\n                customerContainer.hide();\n            }\n\n            // Person and Opportunity selectors\n            var personContainer = $('select[data-hierarchy-level=\"person\"]').closest('.input-group');\n            var opportunityContainer = $('select[data-hierarchy-level=\"opportunity\"]').closest('.input-group');\n            \n            if (customerValue > 0) {\n                personContainer.show();\n                opportunityContainer.show();\n            } else {\n                personContainer.hide();\n                opportunityContainer.hide();\n            }\n\n            // Reset button - show if any selection is made\n            if (marketValue > 0 || customerValue > 0) {\n                resetButton.show();\n            } else {\n                resetButton.hide();\n            }\n\n        },\n\n\n        updateSummary: function() {\n            var summary = [];\n            var icons = {\n                'market': 'üîç',\n                'customer': 'üèõ',\n                'person': 'üë§', \n                'opportunity': 'üí∞'\n            };\n\n            ['market', 'customer', 'person', 'opportunity'].forEach(function(level) {\n                var selector = $('select[data-hierarchy-level=\"' + level + '\"]');\n                var value = selector.val();\n                var text = selector.find('option:selected').text();\n                \n                if (value && value > 0 && text !== '-- Wybierz --' && text !== '≈Åadowanie...') {\n                    summary.push(icons[level] + ' ' + text);\n                }\n            });\n\n            var summaryElement = $('.hierarchy-selector-summary');\n            if (summaryElement.length > 0) {\n                if (summary.length > 0) {\n                    summaryElement.html('<strong>Wybrano:</strong> ' + summary.join(' ‚Üí ')).show();\n                } else {\n                    summaryElement.hide();\n                }\n            }\n        },\n\n        getCurrentSelection: function() {\n            return {\n                market: $('select[data-hierarchy-level=\"market\"]').val() || 0,\n                customer: $('select[data-hierarchy-level=\"customer\"]').val() || 0,\n                person: $('select[data-hierarchy-level=\"person\"]').val() || 0,\n                opportunity: $('select[data-hierarchy-level=\"opportunity\"]').val() || 0\n            };\n        },\n\n        validateSelection: function() {\n            var selection = this.getCurrentSelection();\n            var errors = [];\n\n            if (selection.customer > 0 && selection.market == 0) {\n                errors.push('Market must be selected when customer is selected');\n            }\n\n            if (selection.person > 0 && selection.customer == 0) {\n                errors.push('Customer must be selected when person is selected');\n            }\n\n            if (selection.opportunity > 0 && selection.customer == 0) {\n                errors.push('Customer must be selected when opportunity is selected');\n            }\n\n            return {\n                valid: errors.length === 0,\n                errors: errors,\n                selection: selection\n            };\n        },\n\n        reset: function() {\n            $('select[data-hierarchy-level]').each(function() {\n                $(this).val(0);\n            });\n            this.clearChildSelectors(['customer', 'person', 'opportunity']);\n            this.updateVisibility();\n            this.updateSummary();\n        },\n\n        // Get selected hierarchy data for document generation\n        getSelectedHierarchyData: function() {\n            var selection = this.getCurrentSelection();\n            var data = {};\n            \n            // Add selected values to generation data\n            if (selection.market > 0) {data.hierarchy_market = selection.market;}\n            if (selection.customer > 0) {data.hierarchy_customer = selection.customer;}\n            if (selection.person > 0) {data.hierarchy_person = selection.person;}\n            if (selection.opportunity > 0) {data.hierarchy_opportunity = selection.opportunity;}\n            \n            return data;\n        }\n    };\n\n    return {\n        init: function() {\n            console.log('[tabulatormap] Module loaded');\n            // --- Hierarchy selectors (Moodle 4.5+ AJAX) ---\n            /**\n             * Initializes hierarchy selectors for market, customer, person, and opportunity.\n             */\n            function initHierarchySelectors() {\n                console.log('[initHierarchySelectors] Initializing hierarchy selectors...');\n                const levels = ['market', 'customer', 'person', 'opportunity'];\n                // Patch: Only update market select if element exists and cmid is available.\n                const marketSelect = document.querySelector('#hierarchy_market');\n                if (marketSelect) {\n                    const localCmid = parseInt(marketSelect.dataset.cmid, 10);\n                    console.log(`[initHierarchySelectors] Forcing market fetch for cmid=${localCmid}`);\n                    updateSelect('market', 0, localCmid);\n                } else {\n                    console.warn('[initHierarchySelectors] Cannot find #hierarchy_market element.');\n                }\n\n                /**\n                 * Capitalizes the first letter of a string.\n                 * @param {string} str - The input string.\n                 * @returns {string} The capitalized string.\n                 */\n                function capitalize(str) {\n                    return str.charAt(0).toUpperCase() + str.slice(1);\n                }\n\n                /**\n                 * Handles change event for a hierarchy level select.\n                 * @param {string} level - The level of the hierarchy (e.g., 'market').\n                 */\n                // --- Hierarchy dependency map (for multiple children per parent) ---\n                // Map each hierarchy level to an array of next levels\n                const hierarchyMap = {\n                    market: ['customer'],\n                    customer: ['person', 'opportunity'],\n                    person: [],\n                    opportunity: []\n                };\n\n                // Map of parallel levels for each parent type\n                const parallelLevels = {\n                    customer: ['person', 'opportunity']\n                };\n\n                /**\n                 * Handles selection changes in hierarchy dropdowns and loads related child data.\n                 *\n                 * @param {string} currentLevel - The current level of the selector hierarchy.\n                 */\n                function handleChange(currentLevel) {\n                    const index = levels.indexOf(currentLevel);\n                    const $current = $('#hierarchy_' + currentLevel);\n                    const selectedId = $current.val();\n                    // Ensure cmid is defined and in scope\n                    let cmid = $current.data('cmid');\n                    if (!cmid) {\n                        // Try to get from #hierarchy_market if not found\n                        const marketEl = document.querySelector('#hierarchy_market');\n                        if (marketEl && marketEl.dataset.cmid) {\n                            cmid = parseInt(marketEl.dataset.cmid, 10);\n                        }\n                    }\n                    // Debug log for cmid\n                    console.log('[AJAX DEBUG] cmid before call:', cmid);\n\n                    // Clear all lower-level selects, but do not clear parallel levels of current parent\n                    // Only clear levels that are descendants and not parallel children\n                    let toClear = levels.filter(level => {\n                        return levels.indexOf(level) > index\n                            && !(parallelLevels[currentLevel] || []).includes(level);\n                    });\n                    toClear.forEach(nextLevel => {\n                        const $lower = $('#hierarchy_' + nextLevel);\n                        $lower.parent().hide();\n                        // Clear lower selects\n                        $lower.empty();\n                        $lower.append($('<option>').val('0').text('-- ' + capitalize(nextLevel) + ' --'));\n                    });\n\n                    if (selectedId === '0' || !hierarchyMap[currentLevel] || hierarchyMap[currentLevel].length === 0) {\n                        return;\n                    }\n\n                    // For each next level, load its data (can be more than one, e.g. for 'customer')\n                    const nextLevels = hierarchyMap[currentLevel] || [];\n                    nextLevels.forEach(level => {\n                        const $next = $('#hierarchy_' + level);\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_markets',\n                            args: {\n                                cmid: parseInt(cmid, 10),\n                                parentid: parseInt(selectedId, 10),\n                                childtype: level\n                            }\n                        }])[0].done(function(result) {\n                            console.log('[AJAX] Monitor received data for', level, result);\n                            if (result && result.options && result.options.length > 1) {\n                                $next.empty();\n                                $next.append($('<option>').val('0').text('-- ' + capitalize(level) + ' --'));\n                                result.options.slice(1).forEach(opt => {\n                                    $next.append($('<option>').val(opt.value).text(opt.text));\n                                });\n                                $next.parent().show();\n                            }\n                        }).fail(function(error) {\n                            console.error('[AJAX] Monitor error for', level, error);\n                            Notification.exception(error);\n                        });\n                    });\n                }\n\n                $('#hierarchy-reset-button').on('click', function() {\n                    levels.forEach(function(level, index) {\n                        const $sel = $('#hierarchy_' + level);\n                        $sel.val('0');\n                        if (index > 0) {\n                            $sel.parent().hide();\n                        }\n                    });\n                });\n\n                // Only attach change handlers for 'market' and 'customer'.\n                ['market', 'customer'].forEach(function(level) {\n                    const $select = $('#hierarchy_' + level);\n                    if ($select.length) {\n                        $select.on('change', function() {\n                            handleChange(level);\n                        });\n                    }\n                });\n            }\n\n            /**\n             * Loads child data for a given hierarchy level.\n             *\n             * @param {string} type - The type of the child level (e.g. 'person').\n             * @param {number} parentid - The ID of the parent.\n             * @param {number} cmid - The course module ID.\n             */\n            function updateSelect(type, parentid, cmid) {\n                const select = document.querySelector(`#hierarchy_${type}`);\n                if (!select) {\n                    console.warn(`[updateSelect] Missing select element for #hierarchy_${type}`);\n                    return;\n                }\n\n                // Clear previous options\n                select.innerHTML = '';\n\n                // Use the core/ajax module to make the request\n                console.log('[AJAX] Requesting data (monitor) for type:', type, 'parentid:', parentid, 'cmid:', cmid);\n                Ajax.call([{\n                    methodname: 'mod_valuemapdoc_get_markets',\n                    args: {\n                        cmid: cmid,\n                        parentid: parseInt(parentid, 10),\n                        childtype: type\n                    }\n                }])[0].done(function(result) {\n                    console.log('[AJAX] Monitor received data for', type, result);\n                    if (!result || !result.options) {\n                        console.warn(`[updateSelect] No options returned for ${type}`);\n                        return;\n                    }\n\n                    // Populate the select with new options\n                    result.options.forEach((opt) => {\n                        const option = document.createElement('option');\n                        option.value = opt.value;\n                        option.textContent = opt.text;\n                        if (opt.selected) {\n                            option.selected = true;\n                        }\n                        select.appendChild(option);\n                    });\n\n                    // Show the select if it was hidden\n                    if (select.parentElement) {\n                        select.parentElement.style.display = '';\n                    }\n                }).fail(function(error) {\n                    console.error('[AJAX] Monitor error for', type, error);\n                    Notification.exception(error);\n                });\n            }\n\n            // --- END Hierarchy selectors ---\n            initHierarchySelectors();\n            console.log('HierarchySelector INIT1');\n\n            const el = document.querySelector('#valuemap-table-js');\n            const columns = JSON.parse(el.dataset.columns);\n            const courseid = el.dataset.courseid;\n            const cmid = el.dataset.cmid;\n            const filtercmid = el.dataset.filtercmid || '';\n            const groupid = document.querySelector('#groupfilter')?.value || 0;\n\n            // Initialize Hierarchy Selector if present\n            const hierarchyContainer = document.querySelector('.hierarchy-selector, .hierarchy-selector-compact');\n            if (hierarchyContainer) {\n                HierarchySelector.init(parseInt(cmid));\n                console.log(\"üîç Hierarchy Selector initialized for cmid:\", cmid);\n            }\n\n            const fullscreenBtn = document.querySelector('#toggle-fullscreen');\n\n            if (fullscreenBtn) {\n                fullscreenBtn.addEventListener('click', () => {\n                    document.body.classList.toggle('valuemapdoc-fullscreen');\n                    if (document.body.classList.contains('valuemapdoc-fullscreen')) {\n                        fullscreenBtn.textContent = '‚ùé Zamknij pe≈Çny ekran';\n                    } else {\n                        fullscreenBtn.textContent = 'üî≥ Pe≈Çny ekran';\n                    }\n                });        \n            }\n\n            /**\n             * Wy≈õwietla okno dialogowe z listƒÖ instancji Master do wyboru.\n             * @param {Array} instances Lista instancji Master z polami cmid i name\n             * @param {Function} callback Funkcja wywo≈Çywana po wyborze z parametrem selectedId\n             */\n            function showSelectDialog(instances, callback) {\n                const dialog = document.createElement('div');\n                dialog.innerHTML = `\n                    <label>Wybierz aktywno≈õƒá Master:</label><br>\n                    <select id=\"master-select\" style=\"margin-top: 8px; width: 100%;\">\n                        ${instances.map(i => `<option value=\"${i.cmid}\">${i.name}</option>`).join(\"\")}\n                    </select>\n                    <div style=\"margin-top: 12px; text-align: right;\">\n                        <button id=\"master-cancel\">Anuluj</button>\n                        <button id=\"master-confirm\">OK</button>\n                    </div>\n                `;\n                dialog.style = \"position: fixed; top: 20%; left: 50%; transform: translateX(-50%); padding: 20px; background: white; border: 1px solid #ccc; z-index: 9999;\";\n                document.body.appendChild(dialog);\n\n                dialog.querySelector('#master-cancel').onclick = () => {\n                    document.body.removeChild(dialog);\n                };\n                dialog.querySelector('#master-confirm').onclick = () => {\n                    const selectedId = parseInt(dialog.querySelector('#master-select').value);\n                    document.body.removeChild(dialog);\n                    callback(selectedId);\n                };\n            }\n\n            /**\n             * Generate Tabulator columns with editable fields and action buttons.\n             * @param {Array} columns Array of column definitions received from dataset\n             * @returns {Array} Enhanced column definitions with selection and action buttons\n             */\n            function prepareColumns(columns) {\n                return [\n                    {\n                        formatter: \"rowSelection\",\n                        titleFormatter: \"rowSelection\",\n                        hozAlign: \"center\",\n                        headerSort: false,\n                        width: 50\n                    },\n                    ...columns.map(col => ({\n                        ...col,\n                        headerFilter: \"input\",\n                        editable: (cell) => cell.getRow().getData().ismaster !== 1,\n                        editor: \"textarea\"\n                    }))\n                ];\n            }\n\n            const enhancedColumns = prepareColumns(columns);\n\n            Ajax.call([{\n                methodname: 'mod_valuemapdoc_get_entries',\n                args: {\n                    courseid: courseid,\n                    cmid: cmid,\n                    include_master: filtercmid,\n                    groupid: groupid\n                },\n            }])[0].done(function(response) {\n                console.log('üîç Entries loaded:', response);\n\n                const table = new Tabulator(el, {\n                    data: response,\n                    columns: enhancedColumns,\n                    layout:\"fitDataTable\",\n                    height: \"100%\",\n                    width: \"100%\",\n                    pagination: true,\n                    paginationSize: 20,\n                    placeholder: \"Brak danych do wy≈õwietlenia\",\n                    rowFormatter: function(row) {\n                        const data = row.getData();\n                        if (data.ismaster === 1) {\n                            row.getElement().style.backgroundColor = '#eaffea';\n                            row.getElement().classList.add('ismaster');\n                        }\n                    },\n                    selectable: true,\n                });\n\n                // Obs≈Çuga edycji kom√≥rek\n                table.on(\"cellEdited\", function(cell){\n                        const updatedData = cell.getRow().getData();\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_update_cell',\n                            args: {\n                                id: updatedData.id,\n                                field: cell.getField(),\n                                value: cell.getValue()\n                            }\n                        }])[0].done(function(response) {\n                            // Success\n                        }).fail(function(error) {\n                            console.error('‚ùå B≈ÇƒÖd:', error);\n                            alert(\"Nie uda≈Ço siƒô zapisaƒá zmian.\");\n                        });\n                });\n\n                // Obs≈Çuga podw√≥jnego klikniƒôcia tylko dla rekord√≥w master\n                table.on(\"rowDblClick\", function(e, row) {\n                    const data = row.getData();\n                    if (data.ismaster === 1) {\n                        const rateUrl = `${M.cfg.wwwroot}/mod/valuemapdoc/edit.php?id=${cmid}&entryid=${data.id}`;\n                        window.open(rateUrl);\n                    }\n                });\n\n                // Event delegation for action buttons\n                el.addEventListener('click', function(event) {\n                    const editBtn = event.target.closest('.btn-edit');\n                    const deleteBtn = event.target.closest('.btn-delete');\n                    const moveBtn = event.target.closest('.btn-move');\n\n                    if (editBtn) {\n                        const id = editBtn.dataset.id;\n                        window.location.href = `edit.php?id=${cmid}&entryid=${id}`;\n                    }\n\n                    if (deleteBtn) {\n                        const id = deleteBtn.dataset.id;\n                        const entryid = parseInt(id, 10);\n                        const cmidInt = parseInt(cmid, 10);\n                        if (confirm(\"Czy na pewno chcesz usunƒÖƒá ten wpis?\")) {\n                            Ajax.call([{\n                                methodname: 'mod_valuemapdoc_delete_entry',\n                                args: {\n                                    entryid: entryid,\n                                    cmid: cmidInt\n                                },\n                            }])[0].done(function() {\n                                table.deleteRow(entryid);\n                            }).fail(function(error) {\n                                console.error(\"‚ùå B≈ÇƒÖd usuwania wpisu:\", error);\n                                alert(\"Nie uda≈Ço siƒô usunƒÖƒá wpisu.\");\n                            });\n                        }\n                    }\n\n                    if (moveBtn) {\n                        const id = moveBtn.dataset.id;\n                        if (confirm(\"Czy na pewno chcesz przenie≈õƒá ten wpis do master?\")) {\n                            Ajax.call([{\n                                methodname: 'mod_valuemapdoc_get_master_instances',\n                                args: { courseid: courseid },\n                            }])[0].done(function(instances) {\n                                if (instances.length === 0) {\n                                    alert(\"Brak dostƒôpnych aktywno≈õci typu Master.\");\n                                    return;\n                                }\n\n                                if (instances.length > 1) {\n                                    showSelectDialog(instances, function(selectedId) {\n                                        Ajax.call([{\n                                            methodname: 'mod_valuemapdoc_move_entry_to_master',\n                                            args: {\n                                                entryid: id,\n                                                targetcmid: selectedId\n                                            },\n                                        }])[0].done(function() {\n                                            table.deleteRow(id);\n                                        }).fail(function(error) {\n                                            alert(\"Nie uda≈Ço siƒô przenie≈õƒá wpisu.\");\n                                        });\n                                    });\n                                } else {\n                                    const selectedId = instances[0].cmid;\n                                    Ajax.call([{\n                                        methodname: 'mod_valuemapdoc_move_entry_to_master',\n                                        args: {\n                                            entryid: id,\n                                            targetcmid: selectedId\n                                        },\n                                    }])[0].done(function() {\n                                        table.deleteRow(id);\n                                    }).fail(function(error) {\n                                        alert(\"Nie uda≈Ço siƒô przenie≈õƒá wpisu.\");\n                                    });\n                                }\n                            }).fail(function(error) {\n                                alert(\"Nie uda≈Ço siƒô pobraƒá aktywno≈õci Master.\");\n                            });\n                        }\n                    }\n                });\n\n                // Search functionality\n                const searchInput = document.querySelector('#valuemap-search');\n                if (searchInput) {\n                    searchInput.addEventListener('input', function () {\n                        const filterValue = this.value.toLowerCase();\n                        table.setFilter((data) => {\n                            return columns.some(col => {\n                                const field = col.field;\n                                return data[field]?.toString().toLowerCase().includes(filterValue);\n                            });\n                        });\n                    });\n                }\n\n                // ENHANCED GENERATE BUTTON - includes hierarchy data\n                const generateButton = document.querySelector('#generate-button');\n                if (generateButton) {\n                    generateButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Proszƒô zaznaczyƒá co najmniej jeden rekord.\");\n                            return;\n                        }\n\n                        const templateSelect = document.querySelector('#templateid');\n                        if (!templateSelect || !templateSelect.value) {\n                            alert(\"Wybierz szablon przed generowaniem dokumentu.\");\n                            return;\n                        }\n\n                        // Validate hierarchy selection if hierarchy selector is present\n                        if (hierarchyContainer) {\n                            const validation = HierarchySelector.validateSelection();\n                            if (!validation.valid && validation.errors.length > 0) {\n                                alert(\"B≈ÇƒÖd w wyborze hierarchii:\\n\" + validation.errors.join('\\n'));\n                                return;\n                            }\n                        }\n\n                        const form = document.createElement('form');\n                        form.method = 'POST';\n                        form.action = generateButton.dataset.action || 'generate.php';\n\n                        const idInput = document.createElement('input');\n                        idInput.type = 'hidden';\n                        idInput.name = 'id';\n                        idInput.value = cmid;\n                        form.appendChild(idInput);\n\n                        const templateInput = document.createElement('input');\n                        templateInput.type = 'hidden';\n                        templateInput.name = 'templateid';\n                        templateInput.value = templateSelect.value;\n                        form.appendChild(templateInput);\n\n                        selectedData.forEach(entry => {\n                            const input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = 'entryids[]';\n                            input.value = entry.id;\n                            form.appendChild(input);\n                        });\n\n                        // Add market hierarchy inputs\n                        const levels = ['market', 'customer', 'person', 'opportunity'];\n                        levels.forEach(level => {\n                            const select = document.getElementById(`hierarchy_${level}`);\n                            if (select && select.value && select.value !== \"0\") {\n                                const input = document.createElement('input');\n                                input.type = 'hidden';\n                                input.name = `${level}id`;\n                                input.value = select.value;\n                                form.appendChild(input);\n                            }\n                        });\n\n                        // Add filenameprefix if present\n                        const filenameprefix = document.getElementById('filenameprefix');\n                        if (filenameprefix && filenameprefix.value) {\n                            const input = document.createElement('input');\n                            input.type = 'hidden';\n                            input.name = 'filenameprefix';\n                            input.value = filenameprefix.value;\n                            form.appendChild(input);\n                        }\n\n                        // ADD HIERARCHY DATA if hierarchy selector is present\n                        if (hierarchyContainer) {\n                            const hierarchyData = HierarchySelector.getSelectedHierarchyData();\n                            Object.keys(hierarchyData).forEach(key => {\n                                const input = document.createElement('input');\n                                input.type = 'hidden';\n                                input.name = key;\n                                input.value = hierarchyData[key];\n                                form.appendChild(input);\n                            });\n                        }\n\n                        // Show spinner\n                        const spinner = document.querySelector('#spinner-indicator');\n                        if (spinner) {\n                            spinner.classList.remove('d-none');\n                            sessionStorage.setItem('valuemapdoc_pending_generation', '1');\n                            sessionStorage.setItem('valuemapdoc_pending_timestamp', Date.now().toString());\n                        }\n\n                        document.body.appendChild(form);\n                        form.submit();\n                    });\n                }\n\n                // Bulk operations handlers (pozosta≈Çe bez zmian)\n                const editBulkButton = document.querySelector('#edit-bulk-button');\n                if (editBulkButton) {\n                    editBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do edycji.\");\n                            return;\n                        }\n\n                        if (selectedData.length === 1) {\n                            const id = selectedData[0].id;\n                            const url = `${M.cfg.wwwroot}/mod/valuemapdoc/edit.php?id=${cmid}&entryid=${id}`;\n                            window.location.href = url;\n                        } else {\n                            const ids = selectedData.map(r => r.id);\n                            const url = new URL(`${M.cfg.wwwroot}/mod/valuemapdoc/edit_bulk.php`);\n                            url.searchParams.append('id', cmid);\n                            url.searchParams.append('entryids', ids.join(','));\n                            window.open(url.toString());\n                        }\n                    });\n                }\n\n                // Duplicate functionality\n                const duplicateBulkButton = document.querySelector('#duplicate-bulk-button');\n                if (duplicateBulkButton) {\n                    duplicateBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do powielenia.\");\n                            return;\n                        }\n                        const ids = selectedData.map(r => r.id);\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_create_entries_bulk',\n                            args: {\n                                entryids: ids,\n                                cmid: cmid\n                            }\n                        }])[0].done((response) => {\n                            table.updateOrAddData(response);\n                            table.deselectRow();\n                        }).fail((error) => {\n                            console.error(\"‚ùå B≈ÇƒÖd powielania wielu rekord√≥w:\", error);\n                            alert(\"Nie uda≈Ço siƒô powieliƒá rekordy.\");\n                        });\n                    });\n                }\n\n                // Add empty line\n                const emptyBulkButton = document.querySelector('#empty-bulk-button');\n                if (emptyBulkButton) {\n                    emptyBulkButton.addEventListener('click', function () {\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_create_entries_bulk',\n                            args: {\n                                entryids: {},\n                                cmid: cmid\n                            }\n                        }])[0].done(function(response) {\n                            table.updateOrAddData(response);\n                            table.deselectRow();\n                        }).fail((error) => {\n                            console.error(\"‚ùå B≈ÇƒÖd tworzenia pustych rekord√≥w:\", error);\n                        });\n                    });\n                }\n\n                // Row selection handler for enabling/disabling buttons\n                table.on('rowSelectionChanged', function(data) {\n                    const buttons = [\n                        '#delete-bulk-button', \n                        '#generate-button', \n                        '#move-bulk-button', \n                        '#edit-bulk-button', \n                        '#duplicate-bulk-button'\n                    ];\n\n                    buttons.forEach(selector => {\n                        const button = document.querySelector(selector);\n                        if (button) {\n                            if (data.length > 0) {\n                                button.disabled = false;\n                                button.removeAttribute('disabled');\n                                button.classList.remove('disabled');\n                            } else {\n                                button.setAttribute('disabled', true);\n                                button.classList.add('disabled');\n                                button.disabled = true;\n                            }\n                        }\n                    });\n                });\n\n                // Delete bulk handler\n                const deleteBulkButton = document.querySelector('#delete-bulk-button');\n                if (deleteBulkButton) {\n                    deleteBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do usuniƒôcia.\");\n                            return;\n                        }\n                        const filteredData = selectedData.filter(r => r.ismaster !== 1);\n                        const ids = filteredData.map(r => r.id);\n                        const blocked = selectedData.length - filteredData.length;\n                        if (blocked > 0) {\n                            alert(`${blocked} rekord(√≥w) typu Master nie mogƒÖ zostaƒá usuniƒôte i zosta≈Çy pominiƒôte.`);\n                        }\n                        if (!ids.length) {\n                            alert(\"Nie zaznaczono ≈ºadnych rekord√≥w mo≈ºliwych do usuniƒôcia.\");\n                            return;\n                        }\n                        if (confirm(`Czy na pewno chcesz usunƒÖƒá ${ids.length} rekord√≥w?`)) {\n                            Ajax.call([{\n                                methodname: 'mod_valuemapdoc_delete_bulk',\n                                args: {\n                                    entryids: ids,\n                                    cmid: cmid\n                                }\n                            }])[0].done(() => {\n                                ids.forEach(id => table.deleteRow(id));\n                                table.deselectRow();\n                            }).fail((error) => {\n                                console.error(\"‚ùå B≈ÇƒÖd usuwania wielu rekord√≥w:\", error);\n                                alert(\"Nie uda≈Ço siƒô usunƒÖƒá rekord√≥w.\");\n                            });\n                        }\n                    });\n                }\n\n                // Move bulk handler\n                const moveBulkButton = document.querySelector('#move-bulk-button');\n                if (moveBulkButton) {\n                    moveBulkButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        if (!selectedData.length) {\n                            alert(\"Zaznacz rekordy do przeniesienia.\");\n                            return;\n                        }\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_master_instances',\n                            args: { courseid: courseid }\n                        }])[0].done(function(instances) {\n                            if (instances.length === 0) {\n                                alert(\"Brak dostƒôpnych aktywno≈õci typu Master.\");\n                                return;\n                            }\n\n                            showSelectDialog(instances, function(targetcmid) {\n                                const ids = selectedData.map(r => r.id);\n                                Ajax.call([{\n                                    methodname: 'mod_valuemapdoc_move_bulk',\n                                    args: {\n                                        entryids: ids,\n                                        targetcmid: targetcmid\n                                    }\n                                }])[0].done(() => {\n                                    ids.forEach(id => table.deleteRow(id));\n                                }).fail((error) => {\n                                    console.error(\"‚ùå B≈ÇƒÖd usuwania wielu rekord√≥w:\", error);\n                                    alert(\"Nie uda≈Ço siƒô przenie≈õƒá rekord√≥w.\");\n                                });\n                            });\n                        }).fail((error) => {\n                            console.error(\"‚ùå B≈ÇƒÖd pobierania instancji Master:\", error);   \n                            alert(\"Nie uda≈Ço siƒô pobraƒá listy Master Map.\");\n                        });\n                    });\n                }\n\n                // Export handler\n                const exportButton = document.querySelector('#export-button');\n                if (exportButton) {\n                    exportButton.addEventListener('click', function () {\n                        const selectedData = table.getSelectedData();\n                        const form = document.createElement('form');\n                        form.method = 'POST';\n                        form.action = exportButton.dataset.action || 'export.php';\n\n                        const idInput = document.createElement('input');\n                        idInput.type = 'hidden';\n                        idInput.name = 'id';\n                        idInput.value = cmid;\n                        form.appendChild(idInput);\n\n                        if (selectedData.length > 0) {\n                            selectedData.forEach(entry => {\n                                const input = document.createElement('input');\n                                input.type = 'hidden';\n                                input.name = 'entryids[]';\n                                input.value = entry.id;\n                                form.appendChild(input);\n                            });\n                        }\n\n                        document.body.appendChild(form);\n                        form.submit();\n                    });\n                }\n\n                // Window resize handler\n                window.addEventListener('resize', () => {\n                    table.redraw(true);\n                });\n\n                // Group filter handler\n                const groupFilter = document.querySelector('#groupfilter');\n                if (groupFilter) {\n                    groupFilter.addEventListener('change', () => {\n                        const selectedGroupId = groupFilter.value;\n                        const currentFilterCmid = masterFilter?.value || filtercmid;\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_entries',\n                            args: {\n                                courseid: courseid,\n                                cmid: cmid,\n                                include_master: currentFilterCmid,\n                                groupid: parseInt(selectedGroupId)\n                            },\n                        }])[0].done(function(newResponse) {\n                            table.setData(newResponse);\n                        }).fail(function(error) {\n                            console.error(\"‚ùå B≈ÇƒÖd ≈Çadowania nowych danych po zmianie grupy:\", error);\n                            alert(\"‚ùå AJAX reload error (group):\", error);\n                        });\n                    });\n                }\n\n                // Master filter handler\n                const masterFilter = document.querySelector('#masterfilter');\n                if (masterFilter) {\n                    masterFilter.addEventListener('change', () => {\n                        const newFilterCmid = masterFilter.value;\n\n                        // Save user preference\n                        UserRepository.setUserPreference('mod_valuemapdoc_masterfilters', cmid + ':' + newFilterCmid)\n                            .then(() => {\n                                console.log(\"‚úÖ Preferencja zapisana:\", newFilterCmid);\n                            })\n                            .catch(error => {\n                                console.error(\"‚ùå B≈ÇƒÖd zapisu preferencji:\", error);\n                            });\n\n                        Ajax.call([{\n                            methodname: 'mod_valuemapdoc_get_entries',\n                            args: {\n                                courseid: courseid,\n                                cmid: cmid,\n                                include_master: newFilterCmid,\n                                groupid: document.querySelector('#groupfilter')?.value || 0\n                            },\n                        }])[0].done(function(newResponse) {\n                            table.setData(newResponse);\n                        }).fail(function(error) {\n                            console.error(\"‚ùå B≈ÇƒÖd ≈Çadowania nowych danych:\", error);\n                            alert(\"‚ùå AJAX reload error:\", error);\n                        });\n                    });\n                }\n\n                // Add hierarchy reset button handler if present\n                const hierarchyResetButton = document.querySelector('#hierarchy-reset-button');\n                if (hierarchyResetButton && hierarchyContainer) {\n                    hierarchyResetButton.addEventListener('click', function() {\n                        HierarchySelector.reset();\n                    });\n                }\n\n            }).fail(function(error) {\n                alert(\"Nie uda≈Ço siƒô za≈Çadowaƒá danych.\");\n                console.error(\"‚ùå AJAX error:\", error);\n            });\n        },\n\n        // Expose hierarchy selector for external use\n        getHierarchySelector: function() {\n            return HierarchySelector;\n        }\n    };\n});"],"names":["define","Tabulator","Ajax","UserRepository","Notification","$","HierarchySelector","cmid","init","setupEventListeners","initializeState","self","this","document","on","marketId","val","loadChildren","clearChildSelectors","customerId","updateSummary","reset","console","log","loadInitialMarkets","updateVisibility","marketSelector","length","request","methodname","args","parentid","childtype","call","done","response","success","options","empty","forEach","option","append","value","text","fail","error","parentId","childType","selector","Promise","resolve","prop","html","parseInt","updateSelectorOptions","Error","addNotification","message","type","optionElement","attr","selected","levels","level","placeholder","charAt","toUpperCase","slice","marketValue","customerValue","resetButton","customerContainer","closest","show","hide","personContainer","opportunityContainer","summary","icons","find","push","summaryElement","join","getCurrentSelection","market","customer","person","opportunity","validateSelection","selection","errors","valid","each","getSelectedHierarchyData","data","hierarchy_market","hierarchy_customer","hierarchy_person","hierarchy_opportunity","marketSelect","querySelector","localCmid","dataset","select","warn","innerHTML","result","opt","createElement","textContent","appendChild","parentElement","style","display","exception","updateSelect","capitalize","str","hierarchyMap","parallelLevels","index","$sel","parent","$select","currentLevel","indexOf","$current","selectedId","marketEl","filter","includes","nextLevel","$lower","$next","handleChange","initHierarchySelectors","el","columns","JSON","parse","courseid","filtercmid","groupid","hierarchyContainer","fullscreenBtn","showSelectDialog","instances","callback","dialog","map","i","name","body","onclick","removeChild","addEventListener","classList","toggle","contains","enhancedColumns","formatter","titleFormatter","hozAlign","headerSort","width","col","headerFilter","editable","cell","getRow","getData","ismaster","editor","prepareColumns","include_master","table","layout","height","pagination","paginationSize","rowFormatter","row","getElement","backgroundColor","add","selectable","updatedData","id","field","getField","getValue","alert","e","rateUrl","M","cfg","wwwroot","window","open","event","editBtn","target","deleteBtn","moveBtn","location","href","entryid","cmidInt","confirm","deleteRow","targetcmid","searchInput","filterValue","toLowerCase","setFilter","some","_data$field","toString","generateButton","selectedData","getSelectedData","templateSelect","validation","form","method","action","idInput","templateInput","entry","input","getElementById","filenameprefix","hierarchyData","Object","keys","key","spinner","remove","sessionStorage","setItem","Date","now","submit","editBulkButton","url","ids","r","URL","searchParams","duplicateBulkButton","entryids","updateOrAddData","deselectRow","emptyBulkButton","button","disabled","removeAttribute","setAttribute","deleteBulkButton","filteredData","blocked","moveBulkButton","exportButton","redraw","groupFilter","selectedGroupId","currentFilterCmid","masterFilter","newResponse","setData","newFilterCmid","setUserPreference","then","catch","hierarchyResetButton","getHierarchySelector"],"mappings":"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"}